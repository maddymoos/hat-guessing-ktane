<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wawa.TwitchPlays</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of DoesNotReturnIfAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="parameterValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of DoesNotReturnIfAttribute by passing the parameter <paramref name="parameterValue"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of MaybeNullWhenAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="returnValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of MaybeNullWhenAttribute by passing the parameter <paramref name="returnValue"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/>
            class with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of NotNullWhenAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="returnValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of NotNullWhenAttribute by passing the parameter <paramref name="returnValue"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute"/> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.
            The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of NotNullIfNotNullAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="parameterName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of NotNullIfNotNullAttribute by passing the parameter <paramref name="parameterName"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the
            listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/>
            class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and AttributeTargets.Property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or AttributeTargets.Property member names.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of MemberNotNullAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="member">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of MemberNotNullAttribute by passing the parameter <paramref name="member"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.op_Implicit(System.String[])~System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of MemberNotNullAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])"/>.
            </summary>
            <param name="members">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of MemberNotNullAttribute by passing the parameter <paramref name="members"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members
            have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Gets the optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of StringSyntaxAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="syntax">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of StringSyntaxAttribute by passing the parameter <paramref name="syntax"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>Used to indicate a byref escapes and is not scoped.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>Indicates that an API is experimental and it may change in the future.</summary>
            <remarks><para>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </para></remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the
            ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">
            The ID that the compiler will use when reporting a use of the API the attribute applies to.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks><para>
            The diagnostic ID is shown in build output for warnings and errors.
            This property represents the unique ID that can be used to suppress the warnings or errors, if needed.
            </para></remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation. The API accepts a format string
            instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks><para>
            An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.
            </para></remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of ExperimentalAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="diagnosticId">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of ExperimentalAttribute by passing the parameter <paramref name="diagnosticId"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterceptsLocationAttribute">
            <summary>Indicates that a location is intercepted by this method.</summary>
            <param name="filePath">The file path to the intercepted location.</param>
            <param name="line">The line number to the intercepted location.</param>
            <param name="character">The character number to the intercepted location.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterceptsLocationAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Indicates that a location is intercepted by this method.</summary>
            <param name="filePath">The file path to the intercepted location.</param>
            <param name="line">The line number to the intercepted location.</param>
            <param name="character">The character number to the intercepted location.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.CollectionBuilderAttribute">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/>
            method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks><para>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <c>ReadOnlySpan&lt;T&gt;</c> and returns an instance of the collection being built containing
            a copy of the data from that span. In future releases of .NET, additional patterns may be supported.
            </para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/>
            method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks><para>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <c>ReadOnlySpan&lt;T&gt;</c> and returns an instance of the collection being built containing
            a copy of the data from that span. In future releases of .NET, additional patterns may be supported.
            </para></remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>Gets the type of the builder to use to construct the collection.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>Gets the name of the method on the builder to use to construct the collection.</summary>
            <remarks><para>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/> class.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.op_Implicit(System.Type)~System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of AsyncMethodBuilderAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)"/>.
            </summary>
            <param name="builderType">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of AsyncMethodBuilderAttribute by passing the parameter <paramref name="builderType"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InterpolatedStringHandlerArgumentAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="argument">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InterpolatedStringHandlerArgumentAttribute by passing the parameter <paramref name="argument"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.op_Implicit(System.String[])~System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InterpolatedStringHandlerArgumentAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])"/>.
            </summary>
            <param name="arguments">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InterpolatedStringHandlerArgumentAttribute by passing the parameter <paramref name="arguments"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called in its containing module's initializer.
            </summary>
            <remarks><para>
            When one or more valid methods with this attribute are found in a compilation,
            the compiler will emit a module initializer that calls each of the attributed methods.<br />
            Certain requirements are imposed on any method targeted with this attribute:
            </para><list type="bullet">
            <item><description>The method must be <see langword="static"/>.</description></item>
            <item><description>
            The method must be an ordinary member method, as opposed to a property accessor,
            constructor, local function, and so on.
            </description></item>
            <item><description>The method must be parameterless..</description></item>
            <item><description>The method must return <see langword="void"/>.</description></item>
            <item><description>The method must not be generic or be contained in a generic type.</description></item>
            <item><description>
            The method's effective accessibility must be <see langword="internal"/> or <see langword="public"/>.
            </description></item>
            </list><para>
            For more information, see the
            <a href="https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer">
            ECMA specification
            </a>.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/> attribute to an optional parameter that has a default value.
            You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Indicates that a parameter captures the expression passed for another parameter as a string.</summary>
            <remarks><para>This attribute is implemented in the compiler for C# 10 and later versions only.</para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.</summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>Gets the name of the parameter whose expression should be captured as a string.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of CallerArgumentExpressionAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="parameterName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of CallerArgumentExpressionAttribute by passing the parameter <paramref name="parameterName"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks><para>
            This attribute is unsafe because it may reveal uninitialized memory to the application in certain
            instances (e.g., reading from uninitialized stackalloc'd memory). If applied to a method directly,
            the attribute applies to that method and all nested functions (lambdas, local functions) below it.
            If applied to a type or module, it applies to all methods nested inside. This attribute is intentionally
            not permitted on assemblies. Use at the module level instead to apply to multiple type declarations.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Indicates that an API is in preview. This attribute allows call sites to be
            flagged with a diagnostic that indicates that a preview feature is used.
            Authors can use this attribute to ship preview features in their assemblies.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Message">
            <summary>Gets the optional message associated with this attribute instance.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Url">
            <summary>Gets or sets the optional URL associated with this attribute instance.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of RequiresPreviewFeaturesAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="message">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of RequiresPreviewFeaturesAttribute by passing the parameter <paramref name="message"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is
            required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> class.</summary>
            <param name="featureName">The name of the compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>Gets the name of the compiler feature.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the compiler can choose to allow access to the location
            where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of CompilerFeatureRequiredAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="featureName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of CompilerFeatureRequiredAttribute by passing the parameter <paramref name="featureName"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineArrayAttribute.Length">
            <summary>Gets the length of the inlined array.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.op_Implicit(System.Int32)~System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InlineArrayAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)"/>.
            </summary>
            <param name="length">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InlineArrayAttribute by passing the parameter <paramref name="length"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)"/>.
            </returns>
        </member>
        <member name="T:System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Instructs the System.Text.RegularExpressions source generator to
            generate an implementation of the specified regular expression.
            </summary>
            <remarks>
            <para>
            The generator associated with this attribute only supports C#. It only supplies an implementation when applied
            to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </para>
            <para>
            When the <see cref="T:System.Text.RegularExpressions.Regex"/> supports case-insensitive matches (either by passing
            <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> or using the inline <c>(?i)</c> switch in the pattern) the regex engines
            will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one.
            For example, given the pattern <c>abc</c>, the engines will transform it to the equivalent pattern
            <c>[Aa][Bb][Cc]</c>. The equivalences found in this internal casing table can change over time, for example in
            the case new characters are added to a new version of Unicode. When using the source generator, this
            transformation happens at compile time, which means the casing table used to find the equivalences will depend
            on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex"/> engines, which
            perform this transformation at run-time, meaning they will always use casing table for the current runtime.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/> class with the specified pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">
            Windows
            </a>.
            Culture names follow the standard defined by <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>.
            In addition, starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.</param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">
            Windows
            </a>.
            Culture names follow the standard defined by <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>.
            In addition, starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds">
            <summary>
            Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName">
            <summary>Gets the name of the culture to be used for case sensitive comparisons.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern">
            <summary>Gets the regular expression pattern to match.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options">
            <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.op_Implicit(System.String)~System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of GeneratedRegexAttribute by using the constructor
            <see cref="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="pattern">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of GeneratedRegexAttribute by passing the parameter <paramref name="pattern"/> to the constructor
            <see cref="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:Emik.MatchAttribute">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="M:Emik.MatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Initializes a new instance of the <see cref="T:Emik.MatchAttribute"/> class.</summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">The bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="P:Emik.MatchAttribute.Pattern">
            <summary>Gets the regular expression to match.</summary>
        </member>
        <member name="P:Emik.MatchAttribute.Options">
            <summary>Gets the bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.RegexDeconstructors">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="T:Emik.ChoiceAttribute">
            <summary>
            Indicates to Emik.SourceGenerators.Choices to extend the type, transforming it to a disjoint union.
            </summary>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="set">The type of fields that define the annotated union.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="set">The type of fields that define the annotated union.</param>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
            <param name="set">The type of fields that define the annotated union.</param>
        </member>
        <member name="P:Emik.ChoiceAttribute.IsPubliclyMutable">
            <summary>
            When specified, determines whether the type is mutable publicly.
            </summary>
        </member>
        <member name="P:Emik.ChoiceAttribute.Set">
            <summary>
            When specified, gets the set of fields that define the annotated union.
            </summary>
        </member>
        <member name="T:Emik.NoImplicitOperatorAttribute">
            <summary>
            Prevents the analyzer from generating the implicit conversion into this constructor.
            </summary>
        </member>
        <member name="T:Emik.NoStructuralTypingAttribute">
            <summary>Signifies to ignore this when determining potential interfaces that can be implemented.</summary>
            <remarks>
            <para>
            The behavior of this attribute depends on what you apply it on:
            </para>
            <list type="table">
               <listheader>
                   <term>Target</term>
                   <description>Behavior</description>
               </listheader>
               <item>
                   <term>Type Member</term>
                   <description>Ignores the type altogether. No generation is ever performed on it.</description>
               </item>
               <item>
                   <term>Member</term>
                   <description>Ignores only this particular member when evaluating potential interfaces.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:NullGuard.NullGuardAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
            <param name="flags">
            The <see cref="T:NullGuard.ValidationFlags"/> to use for the target this attribute is being applied to.
            </param>
        </member>
        <member name="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
            <param name="flags">
            The <see cref="T:NullGuard.ValidationFlags"/> to use for the target this attribute is being applied to.
            </param>
        </member>
        <member name="M:NullGuard.NullGuardAttribute.op_Implicit(NullGuard.ValidationFlags)~NullGuard.NullGuardAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of NullGuardAttribute by using the constructor
            <see cref="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)"/>.
            </summary>
            <param name="flags">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of NullGuardAttribute by passing the parameter <paramref name="flags"/> to the constructor
            <see cref="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)"/>.
            </returns>
        </member>
        <member name="T:NullGuard.ValidationFlags">
            <summary>Used by <see cref="T:NullGuard.NullGuardAttribute"/> to target specific categories of members.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.None">
            <summary>Does nothing.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Properties">
            <summary>
            Adds null guard checks to properties getter (cannot return null) and setter (cannot be set to null).
            </summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Arguments">
            <summary>
            Method arguments are checked to make sure they are not null. This only
            applies to normal arguments, and the incoming value of a ref argument.
            </summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.AllPublicArguments">
            <summary>Processes all methods (arguments and return values) and properties.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.OutValues">
            <summary>Out and ref arguments of a method are checked for null just before the method returns.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.ReturnValues">
            <summary>Checks the return value of a method for null.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Methods">
            <summary>Processes all arguments (normal, out and ref) and return values of methods.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.AllPublic">
            <summary>Checks everything (properties, all method args and return values).</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.NonPublic">
            <summary>Applies the other flags to all non-public members as well.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.All">
            <summary>Wildcard.</summary>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.AliasAttribute">
            <summary>An <see cref="T:System.Attribute"/> to attach to a field to signify alternative ways to spell it.</summary>
            <param name="aliases">The prefix of this command.</param>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:System.String"/> in <paramref name="aliases"/> contain at least one <see cref="T:System.Char"/> that is whitespace,
            according to <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </exception>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>An <see cref="T:System.Attribute"/> to attach to a field to signify alternative ways to spell it.</summary>
            <param name="aliases">The prefix of this command.</param>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:System.String"/> in <paramref name="aliases"/> contain at least one <see cref="T:System.Char"/> that is whitespace,
            according to <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </exception>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.AliasAttribute"/> class.</summary>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:System.String"/> in <paramref name="aliases"/> contain at least one <see cref="T:System.Char"/> that is whitespace,
            according to <see cref="M:System.Char.IsWhiteSpace(System.Char)"/>.
            </exception>
            <param name="aliases">The prefix of this command.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.AliasAttribute.Aliases">
            <summary>Gets the alternative representations.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Equals(Wawa.TwitchPlays.Domains.AliasAttribute,Wawa.TwitchPlays.Domains.AliasAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.GetHashCode(Wawa.TwitchPlays.Domains.AliasAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Equals(Wawa.TwitchPlays.Domains.AliasAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.op_Equality(Wawa.TwitchPlays.Domains.AliasAttribute,Wawa.TwitchPlays.Domains.AliasAttribute)">
            <summary>Determines whether both have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them contain the same values,
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.op_Inequality(Wawa.TwitchPlays.Domains.AliasAttribute,Wawa.TwitchPlays.Domains.AliasAttribute)">
            <summary>Determines whether both do not have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString(System.Reflection.FieldInfo)">
            <summary>Gets a <see langword="string"/> representation showing every alias.</summary>
            <param name="x">The field.</param>
            <returns>A concatenation of the parameter <paramref name="x"/> with <see cref="P:Wawa.TwitchPlays.Domains.AliasAttribute.Aliases"/>.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.AliasAttribute.ToString(System.String)">
            <summary>Gets a <see langword="string"/> representation showing every alias.</summary>
            <param name="x">The original name of the field.</param>
            <returns>A concatenation of the parameter <paramref name="x"/> with <see cref="P:Wawa.TwitchPlays.Domains.AliasAttribute.Aliases"/>.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.CommandAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> to attach to methods to signify that
            the command should be processed by <see cref="T:Wawa.TwitchPlays.Twitch`1"/>.
            </summary>
            <param name="prefix">The prefix of this command.</param>
            <param name="priority">The priority of the command. A higher value means it will be evaluated sooner.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.#ctor(System.String,System.Int32)">
            <summary>
            An <see cref="T:System.Attribute"/> to attach to methods to signify that
            the command should be processed by <see cref="T:Wawa.TwitchPlays.Twitch`1"/>.
            </summary>
            <param name="prefix">The prefix of this command.</param>
            <param name="priority">The priority of the command. A higher value means it will be evaluated sooner.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandAttribute.Priority">
            <summary>Gets the priority. Higher means evaluated sooner.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandAttribute.Prefix">
            <summary>Gets the prefix of this command. If <see cref="M:Wawa.Optionals.Maybe.None``1"/>, the prefix is inferred.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Equals(Wawa.TwitchPlays.Domains.CommandAttribute,Wawa.TwitchPlays.Domains.CommandAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.GetHashCode(Wawa.TwitchPlays.Domains.CommandAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Equals(Wawa.TwitchPlays.Domains.CommandAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.op_Equality(Wawa.TwitchPlays.Domains.CommandAttribute,Wawa.TwitchPlays.Domains.CommandAttribute)">
            <summary>Determines whether both have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them contain the same values,
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.op_Inequality(Wawa.TwitchPlays.Domains.CommandAttribute,Wawa.TwitchPlays.Domains.CommandAttribute)">
            <summary>Determines whether both do not have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandAttribute.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.CommandInfo">
            <summary>Combines <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute"/> and <see cref="T:System.Reflection.MethodInfo"/> into one data type.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandInfo.Prefix">
            <summary>
            Gets the prefix for the command, inferring from <see cref="P:Wawa.TwitchPlays.Domains.CommandInfo.Method"/> if <see cref="P:Wawa.TwitchPlays.Domains.CommandInfo.Command"/> doesn't have one.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandInfo.Command">
            <summary>Gets the <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute"/>.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.CommandInfo.Method">
            <summary>Gets the <see cref="T:System.Reflection.MethodInfo"/> to allow for invoking.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Equals(Wawa.TwitchPlays.Domains.CommandInfo,Wawa.TwitchPlays.Domains.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.GetHashCode(Wawa.TwitchPlays.Domains.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Equals(Wawa.TwitchPlays.Domains.CommandInfo)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.op_Equality(Wawa.TwitchPlays.Domains.CommandInfo,Wawa.TwitchPlays.Domains.CommandInfo)">
            <summary>Determines whether both have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them contain the same values,
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.op_Inequality(Wawa.TwitchPlays.Domains.CommandInfo,Wawa.TwitchPlays.Domains.CommandInfo)">
            <summary>Determines whether both do not have the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.CommandInfo.TryFrom(System.Reflection.MethodInfo)">
            <summary>Attempts to create an instance of <see cref="T:Wawa.TwitchPlays.Domains.CommandInfo"/>.</summary>
            <param name="method">The method to use to attempt to create an instance.</param>
            <returns>
            A <see cref="T:Wawa.TwitchPlays.Domains.CommandInfo"/> if a <see cref="T:Wawa.TwitchPlays.Domains.CommandAttribute"/> can be obtained
            from the parameter <paramref name="method"/> and <paramref name="method"/> has an
            appropriate return type, otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.Instruction">
            <summary>Defines an instruction for Twitch Plays to process.</summary>
            <remarks><para>
            Based on the advanced implementation documentation:
            https://github.com/samfundev/KtaneTwitchPlays/wiki/External-Mod-Module-Support#advanced-implementation.
            </para></remarks>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> class.</summary>
            <remarks><para>Detonates the bomb when yielded.</para></remarks>
            <param name="reason">The optional reason for the explosion.</param>
            <param name="moduleName">The override of the module name that caused the explosion.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.Collections.Generic.IEnumerable{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> class.</summary>
            <remarks><para>Provides a nested enumeration.</para></remarks>
            <param name="enumerator">The value to pass in.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.Collections.Generic.IEnumerator{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> class.</summary>
            <remarks><para>Provides a nested enumeration.</para></remarks>
            <param name="enumerator">The value to pass in.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> class.</summary>
            <remarks><para>Changes the orientation of the bomb when yielded.</para></remarks>
            <param name="first">
            For the Bomb. The form of
            <c>(Quaternion.Euler(x, 0, 0) * Quaternion.Euler(0, y, 0) * (Quaternion.Euler(0, 0, z))</c>.
            </param>
            <param name="second">
            For the camera side view. The second one in the form of <c>Quaternion.Euler(x, y, z)</c>.
            </param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> class.</summary>
            <param name="value">The value to pass in.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> class.</summary>
            <param name="value">The value to pass in.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.FrameAdvance">
            <summary>Gets the value that can be yielded to wait for the next frame.</summary>
            <remarks><para>This value is always null. Do not dereference.</para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.Pause">
            <summary>Gets the value that can be yielded to allow other modules to be processed in Twitch Plays.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.UsableInForcedSolve">
            <summary>
            Gets a value indicating whether this current instance contains a value that can be
            evaluated by both the Twitch Plays command processor for users, and the forced solver,
            or whether it can only be strictly used for the Twitch Plays command processor.
            </summary>
            <remarks><para>
            Currently supports <see cref="P:Wawa.TwitchPlays.Domains.Instruction.Pause"/>, and values that Unity already natively supports: <see langword="null"/>
            / <see cref="P:Wawa.TwitchPlays.Domains.Instruction.FrameAdvance"/>, <see cref="T:UnityEngine.CustomYieldInstruction"/>, and <see cref="T:UnityEngine.YieldInstruction"/>.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.Instruction.Value">
            <summary>
            Gets a value indicating whether Twitch Plays should allow
            other modules to be interacted with for the current frame.
            </summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Equals(Wawa.TwitchPlays.Domains.Instruction,Wawa.TwitchPlays.Domains.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.GetHashCode(Wawa.TwitchPlays.Domains.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Equals(Wawa.TwitchPlays.Domains.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(UnityEngine.CustomYieldInstruction)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="customYield">The <see cref="T:UnityEngine.CustomYieldInstruction"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(KMSelectable)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="selectable">The <see cref="T:KMSelectable"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(KMSelectable[])~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="selectables">
            The <see cref="T:KMSelectable"/> <see cref="T:System.Array"/> to pass in to the constructor.
            </param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(UnityEngine.Quaternion)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="orientation">The <see cref="T:UnityEngine.Quaternion"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(Wawa.TwitchPlays.Domains.TwitchString)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="query">The <see cref="T:Wawa.TwitchPlays.Domains.TwitchString"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Implicit(UnityEngine.YieldInstruction)~Wawa.TwitchPlays.Domains.Instruction">
            <summary>Implicitly calls the constructor.</summary>
            <param name="yield">The <see cref="T:UnityEngine.YieldInstruction"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Equality(Wawa.TwitchPlays.Domains.Instruction,Wawa.TwitchPlays.Domains.Instruction)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true"/> if both instances contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.op_Inequality(Wawa.TwitchPlays.Domains.Instruction,Wawa.TwitchPlays.Domains.Instruction)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true"/> if both instances do not contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromCustomYieldInstruction(UnityEngine.CustomYieldInstruction)">
            <summary>
            Converts the <see cref="T:UnityEngine.CustomYieldInstruction"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="customYield">The <see cref="T:UnityEngine.CustomYieldInstruction"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="customYield"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromInstructions(System.Collections.Generic.IEnumerable{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="enumerable"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromInstructions(System.Collections.Generic.IEnumerator{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="enumerator">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="enumerator"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromInstructions(Wawa.TwitchPlays.Domains.Instruction[])">
            <summary>
            Converts the <see cref="T:System.Array"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="array">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="array"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromKMSelectable(KMSelectable)">
            <summary>Converts the <see cref="T:KMSelectable"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.</summary>
            <param name="selectable">The <see cref="T:KMSelectable"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="selectable"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromKMSelectableArray(KMSelectable[])">
            <summary>
            Converts the <see cref="T:KMSelectable"/> <see cref="T:System.Array"/>
            to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="selectables">The <see cref="T:KMSelectable"/> <see cref="T:System.Array"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="selectables"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromQuaternion(UnityEngine.Quaternion)">
            <summary>Converts the <see cref="T:UnityEngine.Quaternion"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.</summary>
            <param name="orientation">The <see cref="T:UnityEngine.Quaternion"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="orientation"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromTwitchString(Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>
            Converts the <see cref="T:Wawa.TwitchPlays.Domains.TwitchString"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="query">The <see cref="T:Wawa.TwitchPlays.Domains.TwitchString"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.FromYieldInstruction(UnityEngine.YieldInstruction)">
            <summary>
            Converts the <see cref="T:UnityEngine.YieldInstruction"/> to a <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.
            </summary>
            <param name="yield">The <see cref="T:UnityEngine.YieldInstruction"/> instance to convert.</param>
            <returns>
            A <see langword="new"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> instance encapsulating <paramref name="yield"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.Instruction.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.InstructionCore">
            <summary>Implementations for <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/>.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.InstructionCore.Flatten(System.Collections.Generic.IEnumerable{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Flattens the enumeration for coroutine use.</summary>
            <remarks><para>The caller is responsible for disposing the returned enumerator.</para></remarks>
            <param name="that">This instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:System.Object"/> that is friendly to be used for coroutines,
            containing the values from <paramref name="that"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.InstructionCore.Flatten(System.Collections.Generic.IEnumerator{Wawa.TwitchPlays.Domains.Instruction})">
            <summary>Flattens nested enumerators into one long enumerator.</summary>
            <param name="that">This instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The flattened enumerator of the parameter <paramref name="that"/>.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.ITwitchSupportable">
            <summary>Interface for Twitch Plays support.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.ITwitchSupportable.TwitchHandleForcedSolve">
            <summary>
            This method gets grabbed by Twitch Plays which is used whenever a thrown <see cref="T:System.Exception"/>
            is unhandled, a votesolve/solvebomb is performed, or when an admin forces this module to be solved.
            </summary>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.ITwitchSupportable.ProcessTwitchCommand(System.String)">
            <summary>This method gets grabbed by Twitch Plays to process a user command.</summary>
            <param name="command">The command of the user.</param>
            <returns>A list of instructions for Twitch Plays.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.TwitchString">
            <summary>Represents a <see cref="T:System.String"/> query to send to Twitch Plays.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.AutoSolve">
            <summary>Gets the auto-solving Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate solving the module automatically, as if it threw an exception while solving.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.CancelDetonate">
            <summary>Gets the cancellation-of-detonation Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate cancelling a previously issued delayed detonation command on the same module.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Cancelled">
            <summary>Gets the cancellation-of-processing Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that you have stopped processing the command in response to the
            <see cref="F:Wawa.TwitchPlays.Twitch`1.TwitchShouldCancelCommand"/> bool being set to <see langword="true"/>.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.EndMultipleStrikes">
            <summary>Gets the strike enabler Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the strike tracker should be enabled.
            If any strikes were issued during the time it was disabled,
            they will be awarded and the routine stopped at that point,
            otherwise, it will just cancel the "<c>VoteNay Mod {id} got 0 strikes! +0 strike to {Nickname}</c>"
            message that would otherwise be posted.
            Likewise, if the module was solved at the time this command is issued,
            the processing will be stopped as of that point as well.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.EndWaitingMusic">
            <summary>Gets the cancellation-of-music Twitch Plays query.</summary>
            <remarks><para>Yield return this to indicate stopping the waiting music mid-command.</para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.HideCamera">
            <summary>Gets the camera hider Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to hide the heads-up display and cameras while doing quaternion rotations,
            if it is expected that the camera/hud will get in the way.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.MultipleStrikes">
            <summary>Gets the strike disabler Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the issued command is going to cause more than one strike,
            so should disable the internal strike tracker in order to avoid flooding the chat with
            "<c>VoteNay Mod {id} got a strike! +1 strike to {Nickname}</c>" for as many strikes as will be awarded.
            This also disables the internal solve tracker as well. This allows for sending
            additional messages or continue processing commands regardless of the solve/strike state.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Solve">
            <summary>Gets the solving Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that this command will solve the module at some later point;
            all this does is tell Twitch Plays to attribute the solve to the author of this command.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Strike">
            <summary>Gets the striking Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that this command will cause a strike at some later point;
            all this does is tell Twitch Plays to attribute the strike to the author of this command.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.ToggleWaitingMusic">
            <summary>Gets the music toggle Twitch Plays query.</summary>
            <remarks><para>Yield return this to toggle the waiting music on and off mid-command.</para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.TryCancelSequence">
            <summary>Gets the allow cancel Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the <c>KMSelectable[]</c> sequence that follows this command should be
            cancelled if a "<c>!cancel</c>" or "<c>!stop</c>" is issued mid-way through that sequence.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.UnsubmittablePenalty">
            <summary>Gets the unsubmittable penalty Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate that the command couldn't submit an answer and should only be used to prevent
            users from guessing the answer. This should not be used if an answer could never be submittable for a module.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.WaitingMusic">
            <summary>Gets the music Twitch Plays query.</summary>
            <remarks><para>
            Yield return this to indicate playing the waiting music if a command will take long to finish.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.IsSendMessage">
            <summary>
            Gets a value indicating whether this instance contains an instruction to send a message to the Twitch chat.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.TwitchString.Message">
            <summary>Gets the message to send to Twitch Plays.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.op_Implicit(Wawa.TwitchPlays.Domains.TwitchString)~System.String">
            <summary>Implicitly calls the property <see cref="P:Wawa.TwitchPlays.Domains.TwitchString.Message"/>.</summary>
            <param name="query">The <see cref="T:Wawa.TwitchPlays.Domains.TwitchString"/> to access the property from.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.op_Equality(Wawa.TwitchPlays.Domains.TwitchString,Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true"/> if both instances contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.op_Inequality(Wawa.TwitchPlays.Domains.TwitchString,Wawa.TwitchPlays.Domains.TwitchString)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true"/> if both instances do not contain the same values.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.StrikeMessage(System.String,System.Boolean,System.Boolean)">
            <summary>Yield return this to allow you to tell the user why they got a strike if it isn't clear.</summary>
            <remarks><para>
            By default, the parameter <paramref name="message"/> is considered
            to be a message template in accordance to the following table:
            </para><list type="table"><item><term><c>
            {0}
            </c></term><description>
            The username of the person who initiated the command.
            </description></item><item><term><c>
            {1}
            </c></term><description>
            The Twitch Plays ID that represents the current module.
            </description></item></list><para>
            If you wish to have <c>{</c> or <c>}</c> as part of your message directly, refer to <paramref name="format"/>.
            </para></remarks>
            <param name="message">The message to send.</param>
            <param name="format">When <see langword="false"/>, treats <c>{</c> and <c>}</c> as plaintext.</param>
            <param name="halt">When <see langword="true"/>, halts the command processing after the message is sent.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.TryCancel(System.String)">
            <summary>
            Yield return this to indicate that this command is allowed to be cancelled at the given time of the yield.
            </summary>
            <remarks><para>
            Just know that you won't be able to clean up if you do your cancel this way,
            and there is a pending <c>!cancel</c> or <c>!stop</c>.
            </para></remarks>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.TryWaitCancel(System.Single,System.String)">
            <summary>
            Yield return this to cause Twitch Plays to wait for the given time,
            and any time during the entire duration, the command may cancel.
            </summary>
            <remarks><para>
            Like <see cref="M:Wawa.TwitchPlays.Domains.TwitchString.TryCancel(System.String)"/>, you won't be able to clean up if you cancel this way.
            Also like <see cref="M:Wawa.TwitchPlays.Domains.TwitchString.TryCancel(System.String)"/>, <paramref name="message"/> is optional.
            </para></remarks>
            <param name="time">The amount of time to wait.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SendToChat(System.String,System.Boolean,System.Boolean)">
            <summary>Yield return this to send a chat directly to twitch chat.</summary>
            <remarks><para>
            By default, the parameter <paramref name="message"/> is considered
            to be a message template in accordance to the following table:
            </para><list type="table"><item><term><c>
            {0}
            </c></term><description>
            The username of the person who initiated the command.
            </description></item><item><term><c>
            {1}
            </c></term><description>
            The Twitch Plays ID that represents the current module.
            </description></item></list><para>
            If you wish to have <c>{</c> or <c>}</c> as part of your message directly, refer to <paramref name="format"/>.
            </para></remarks>
            <param name="message">The message to send.</param>
            <param name="format">When false, treats <c>{</c> and <c>}</c> as plaintext.</param>
            <param name="halt">When <see langword="true"/>, halts the command processing after the message is sent.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SendToChatError(System.String,System.Boolean,System.Boolean)">
            <summary>Yield return this to send a message to the chat about why a users' command was invalid.</summary>
            <remarks><para>
            By default, the parameter <paramref name="message"/> is considered
            to be a message template in accordance to the following table:
            </para><list type="table"><item><term><c>
            {0}
            </c></term><description>
            The username of the person who initiated the command.
            </description></item><item><term><c>
            {1}
            </c></term><description>
            The Twitch Plays ID that represents the current module.
            </description></item></list><para>
            If you wish to have <c>{</c> or <c>}</c> as part of your message directly, refer to <paramref name="format"/>.
            </para></remarks>
            <param name="message">The message to send.</param>
            <param name="format">When <see langword="false"/>, treats <c>{</c> and <c>}</c> as plaintext.</param>
            <param name="halt">When <see langword="true"/>, halts the command processing after the message is sent.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SendDelayedMessage(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>Yield return this to send a message to chat after <paramref name="time"/> seconds.</summary>
            <remarks><para>
            By default, the parameter <paramref name="message"/> is considered
            to be a message template in accordance to the following table:
            </para><list type="table"><item><term><c>
            {0}
            </c></term><description>
            The username of the person who initiated the command.
            </description></item><item><term><c>
            {1}
            </c></term><description>
            The Twitch Plays ID that represents the current module.
            </description></item></list><para>
            If you wish to have <c>{</c> or <c>}</c> as part of your message directly, refer to <paramref name="format"/>.
            </para></remarks>
            <param name="time">The amount of time to wait before the message gets sent.</param>
            <param name="message">The message to send.</param>
            <param name="format">When <see langword="false"/>, treats <c>{</c> and <c>}</c> as plaintext.</param>
            <param name="halt">When <see langword="true"/>, halts the command processing after the message is sent.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Detonate(System.Nullable{System.Single},System.String)">
            <summary>Yield return this to explode the bomb instantly.</summary>
            <remarks><para>
            <paramref name="time"/> is specified in number of seconds before the bomb explodes.
            (Note, sending another detonate command will auto-cancel the previous one on
            the same module if it hasn't happened already.).
            <paramref name="message"/> is the message to send to chat upon detonation.
            Both of the parameters are optional.
            </para></remarks>
            <param name="time">The amount of time before the bomb blows up.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.SkipTime(System.Single)">
            <summary>Yield return this to try advancing the clock to the specified time.</summary>
            <remarks><para>
            You must put the full time you wish to skip to, and this time either needs to be less than the current time,
            if in normal/time mode, or greater than the current time, if in zen mode.
            Example, if you wanted to set the clock to 5:24, then you do "<c>SkipTime(324)</c>".
            You can target partway through the seconds, such as "<c>SkipTime(45.28f)</c>",
            which would then set the clock to 45.28, provided that time has NOT gone by already. You must also
            set <see cref="P:Wawa.TwitchPlays.Twitch`1.IsTimeSkippable"/> to <see langword="true"/>, for this function to work.
            </para></remarks>
            <param name="seconds">The time to skip to in seconds.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.AwardPoints(System.Int32)">
            <summary>Yield return this to award the user that sent the command points directly.</summary>
            <remarks><para>
            This is currently used for mods like Souvenir to give points to users that answered the questions equally.
            </para></remarks>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.AwardPointsOnSolve(System.Int32)">
            <summary>
            Yield return this to award the last user that sent the command points when the module is solved.
            </summary>
            <remarks><para>
            The module must prevent any user from sending commands afterward in order for Twitch Plays
            to award points to the correct user. This is currently used by the Twin module
            when extra points must be given but the module is not solved immediately.
            </para></remarks>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Equals(Wawa.TwitchPlays.Domains.TwitchString)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Equals(Wawa.TwitchPlays.Domains.TwitchString,Wawa.TwitchPlays.Domains.TwitchString)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.GetHashCode(Wawa.TwitchPlays.Domains.TwitchString)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.TwitchString.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.YieldEventArgs">
            <summary>An <see cref="T:System.EventArgs"/> for yielded items.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.#ctor(Wawa.TwitchPlays.Domains.Instruction)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.TwitchPlays.Domains.YieldEventArgs"/> class.</summary>
            <param name="query">The value to store.</param>
        </member>
        <member name="P:Wawa.TwitchPlays.Domains.YieldEventArgs.Query">
            <summary>Gets the value that was yielded.</summary>
            <remarks><para>
            A <see langword="null"/> <see cref="T:Wawa.TwitchPlays.Domains.Instruction"/> is a completely valid query,
            so this value is therefore around a <see cref="T:Wawa.Optionals.Maybe`1"/>.
            </para></remarks>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Equals(Wawa.TwitchPlays.Domains.YieldEventArgs,Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.GetHashCode(Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Equals(Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.op_Equality(Wawa.TwitchPlays.Domains.YieldEventArgs,Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <summary>Determines whether both instances point to the same component.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them point to the same component, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.op_Inequality(Wawa.TwitchPlays.Domains.YieldEventArgs,Wawa.TwitchPlays.Domains.YieldEventArgs)">
            <summary>Determines whether both instances do not point to the same component.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both of them do not point to the same component,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Domains.YieldEventArgs.ToString">
            <summary>Uses <see cref="M:Wawa.Modules.Stringifier.Stringify``1(``0)"/> on <see cref="P:Wawa.TwitchPlays.Domains.YieldEventArgs.Query"/>.</summary>
            <returns>A <see cref="T:System.String"/> representation of <see cref="P:Wawa.TwitchPlays.Domains.YieldEventArgs.Query"/>.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Domains.NamespaceDoc">
            <summary>Contains domain objects used within <see cref="T:Wawa.TwitchPlays.Twitch`1"/>.</summary>
        </member>
        <member name="T:Wawa.TwitchPlays.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.Bindings">
            <summary>The default binding flags throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.FieldBindings">
            <summary>The default binding flags throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.OrdinalIgnoreCase">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.Globals.InternalField">
            <summary>Field name generated by enums.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Internals.Globals.Reason(Wawa.TwitchPlays.Internals.ParseError,System.Type@)">
            <summary>Creates a human-friendly <see langword="string"/> representing the reason for the error.</summary>
            <param name="err">The error to convert.</param>
            <param name="type">The type that was used.</param>
            <returns>A human-friendly <see langword="string"/> representing the reason for the error.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Internals.Globals.Show(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>Gets a <see cref="T:System.String"/> representation of parameters.</summary>
            <param name="parameters">The parameters to make a string representation of.</param>
            <returns>A <see cref="T:System.String"/> representation of the parameter <paramref name="parameters"/>.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.Internals.ParseError">
            <summary>Defines parse errors.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.Empty">
            <summary>Indicates that the query is empty.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.Field">
            <summary>Indicates that a field of the same name or alias could not be found.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.NoMatch">
            <summary>Indicates that the <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/> method returned false.</summary>
        </member>
        <member name="F:Wawa.TwitchPlays.Internals.ParseError.Unserializable">
            <summary>Indicates that the type is unserializable.</summary>
        </member>
        <member name="T:Wawa.TwitchPlays.Internals.TwitchEditor">
            <summary>Custom inspector for <see cref="T:Wawa.TwitchPlays.Twitch`1"/>.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Internals.TwitchEditor.OnInspectorGUI">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Internals.TwitchEditor.ToString">
            <inheritdoc />
        </member>
        <member name="T:Wawa.TwitchPlays.NamespaceDoc">
            <summary>Contains <see cref="T:Wawa.TwitchPlays.Twitch`1"/>, and its interfaces.</summary>
        </member>
        <member name="T:Wawa.TwitchPlays.ITwitchDeclarable">
            <summary>Interface for non-generic <see cref="T:Wawa.TwitchPlays.Twitch`1"/>.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsPrintingYields">
            <summary>
            Gets or sets a value indicating whether values yielded from a
            Twitch Plays <see cref="T:UnityEngine.Coroutine"/> should be logged.
            </summary>
            <remarks><para>
            Particularily useful as a debugging tool, whether it be in the editor or in-game.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsCancelCommand">
            <summary>
            Gets a value indicating whether it should cancel command processing.
            </summary>
            <remarks>
            <para>
            If this returns <see langword="true"/>,
            then stop processing the command, clean up, then do a <c><see langword="yield"/> <see langword="return"/>
            TwitchString.Cancelled;</c> to acknowledge the cancel.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTime">
            <summary>Gets a value indicating whether it is in Time Mode, where solves change the timer.</summary>
            <remarks><para>This is useful for modules that use the timer's value.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTimeSkippable">
            <summary>
            Gets a value indicating whether it should allow for the timer to be skipped when the module it is in,
            as well as any other modules that would like to skip time, are the only unsolved modules left on the bomb.
            </summary>
            <remarks><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.IsZen">
            <summary>
            Gets a value indicating whether the timer is counting up instead of down, for special cases,
            such as controlling how to sort button release times, or whether there is a low timer event or not.
            </summary>
            <remarks><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Help">
            <summary>Gets or sets the help message that gets sent when typing <c>!{id} help</c>.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Manual">
            <summary>
            Gets or sets the manual that is looked up on The Manual Repository when
            <c>!{id} manual</c> is entered into chat.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Abandons">
            <summary>Gets the list that contains modules that it should stop processing.</summary>
            <remarks><para>
            Currently, the only module that uses this capability is Souvenir.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="P:Wawa.TwitchPlays.ITwitchDeclarable.Inner">
            <summary>Gets the module that is attached to this instance.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchDeclarable.ForceSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, this method is used.
            </summary>
            <remarks><para>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </para></remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="T:Wawa.TwitchPlays.ITwitchMutable">
            <summary>Interface to access internal editing of boolean values.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsCancelCommand(System.Boolean)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsCancelCommand"/>.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.Internals.TwitchEditor"/>.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsTime(System.Boolean)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTime"/>.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.Internals.TwitchEditor"/>.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsTimeSkippable(System.Boolean)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsTimeSkippable"/>.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.Internals.TwitchEditor"/>.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsTP(System.Boolean)">
            <summary>Sets the inner field of <see cref="P:Wawa.Modules.ISolvable.IsTP"/>.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.Internals.TwitchEditor"/>.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="M:Wawa.TwitchPlays.ITwitchMutable.SetIsZen(System.Boolean)">
            <summary>Sets the inner field of <see cref="P:Wawa.TwitchPlays.ITwitchDeclarable.IsZen"/>.</summary>
            <remarks><para>Intended for use in <see cref="T:Wawa.TwitchPlays.Internals.TwitchEditor"/>.</para></remarks>
            <param name="value">The value to set the field.</param>
        </member>
        <member name="T:Wawa.TwitchPlays.Twitch`1">
            <summary>
            Base class for TwitchPlays support for solvable and needy modded modules in Keep Talking and Nobody Explodes.
            </summary>
            <typeparam name="TMod">
            The <see cref="T:System.Type"/> of <see cref="T:Mod"/> to implement Twitch Plays support for.
            </typeparam>
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Module">
            <summary>Gets the instance of the module.</summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.AutoImplementedHelp">
            <summary>Gets the suggested help command. This is a fallback value used when one isn't specified.</summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Awake">
            <summary>
            Logs version numbers and automatically sets <see cref="P:Wawa.TwitchPlays.Twitch`1.Help"/>.
            Be sure to call this method if you are implementing Awake.
            </summary>
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsPrintingYields">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsCancelCommand">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsTime">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsTimeSkippable">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsTP">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.IsZen">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Help">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Manual">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Abandons">
            <inheritdoc />
        </member>
        <member name="P:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchDeclarable#Inner">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.ProcessTwitchCommand(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.TwitchHandleForcedSolve">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.ForceSolve">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsCancelCommand(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsTime(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsTimeSkippable(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsTP(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#TwitchPlays#ITwitchMutable#SetIsZen(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Wawa#Modules#ISolvable#ForceTPSolve">
            <inheritdoc/>
        </member>
        <member name="E:Wawa.TwitchPlays.Twitch`1.OnYield">
            <summary>
            Gets or sets an event invoked whenever any command (including <see cref="P:Wawa.TwitchPlays.Domains.TwitchString.AutoSolve"/>) yields
            something and is processed. The value that it yielded is passed in.
            </summary>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.UntilSolve">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to
            allow interactions of other modules until the module is solved.
            </summary>
            <returns>
            Repeatedly <see langword="true"/>, halting when <see cref="P:Wawa.Modules.State.IsSolved"/>
            from <see cref="P:Wawa.TwitchPlays.Twitch`1.Module"/> is <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.UntilStrike">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to
            allow interactions of other modules until the module has struck.
            </summary>
            <returns>
            Repeatedly <see langword="true"/>, halting when <see cref="P:Wawa.Modules.State.HasStruck"/>
            from <see cref="P:Wawa.TwitchPlays.Twitch`1.Module"/> is <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Sequence(System.Collections.Generic.IEnumerable{KMSelectable},System.Single)">
            <summary>
            Presses a sequence of buttons in order of <paramref name="selectables"/>,
            waiting <paramref name="duration"/> seconds in-between each, and interrupting as soon as
            <see cref="P:Wawa.Modules.State.HasStruck"/> is <see langword="true"/>.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="duration">The delay between each button press in seconds.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.IndexedSequence(System.Collections.Generic.IList{KMSelectable},System.Single,System.Int32[])">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices"/> within <paramref name="selectables"/>,
            waiting <paramref name="duration"/> seconds in-between each, and interrupting as soon as
            <see cref="P:Wawa.Modules.State.HasStruck"/> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="duration">The delay between each button press in seconds.</param>
            <param name="indices">The indices to press within the list <paramref name="selectables"/>.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.IndexedSequence(System.Collections.Generic.IList{KMSelectable},System.Single,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices"/> within <paramref name="selectables"/>,
            waiting <paramref name="duration"/> seconds in-between each, and interrupting as soon as
            <see cref="P:Wawa.Modules.State.HasStruck"/> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="duration">The delay between each button press in seconds.</param>
            <param name="indices">The indices to press within the list <paramref name="selectables"/>.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Equal(System.String,System.String)">
            <summary>Determines whether two strings are equal, without accounting for case.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if the parameters <paramref name="left"/> and
            <paramref name="right"/> are equal to each other according to the comparison type
            <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.YieldWhile``1(``0,System.Func{System.Boolean})">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to repeatedly
            <see langword="yield"/> <see langword="return"/> an item until a condition is no longer met.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the items that are yielded.</typeparam>
            <param name="item">The item to yield repeatedly.</param>
            <param name="condition">The condition to repeatedly check until it returns <see langword="false"/>.</param>
            <returns>
            <paramref name="item"/> continuously until <paramref name="condition"/> is <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.YieldUntil``1(``0,System.Func{System.Boolean})">
            <summary>
            You can <see langword="yield"/> <see langword="return"/> this to repeatedly
            <see langword="yield"/> <see langword="return"/> an item until a condition is met.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the items that are yielded.</typeparam>
            <param name="item">The item to yield repeatedly.</param>
            <param name="condition">The condition to repeatedly check until it returns <see langword="false"/>.</param>
            <returns>
            <paramref name="item"/> continuously until <paramref name="condition"/> is <see langword="true"/>.
            </returns>
        </member>
        <member name="M:Wawa.TwitchPlays.Twitch`1.Split(System.String,System.String)">
            <summary>
            Splits a <see cref="T:System.String"/> into an <see cref="T:System.Array"/> of <see cref="T:System.String"/> values based on a separator.
            </summary>
            <param name="instance">The <see cref="T:System.String"/> to split.</param>
            <param name="separator">The separator to split each <see cref="T:System.String"/> with.</param>
            <returns>
            An <see cref="T:System.Array"/> of <see cref="T:System.String"/> values which are substrings of <paramref name="instance"/>
            based on <paramref name="separator"/>. Empty entries are omitted.
            </returns>
        </member>
        <member name="T:wawa.TwitchPlays.AssemblyDoc">
            <summary>Adds an extensive system for creating Twitch Plays components that are attached to modded modules.</summary>
        </member>
    </members>
</doc>
