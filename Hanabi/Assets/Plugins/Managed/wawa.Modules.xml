<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wawa.Modules</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of DoesNotReturnIfAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="parameterValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of DoesNotReturnIfAttribute by passing the parameter <paramref name="parameterValue"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of MaybeNullWhenAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="returnValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of MaybeNullWhenAttribute by passing the parameter <paramref name="returnValue"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/>
            class with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of NotNullWhenAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="returnValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of NotNullWhenAttribute by passing the parameter <paramref name="returnValue"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute"/> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.
            The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of NotNullIfNotNullAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="parameterName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of NotNullIfNotNullAttribute by passing the parameter <paramref name="parameterName"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the
            listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/>
            class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and AttributeTargets.Property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or AttributeTargets.Property member names.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of MemberNotNullAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="member">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of MemberNotNullAttribute by passing the parameter <paramref name="member"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.op_Implicit(System.String[])~System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of MemberNotNullAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])"/>.
            </summary>
            <param name="members">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of MemberNotNullAttribute by passing the parameter <paramref name="members"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members
            have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Gets the optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of StringSyntaxAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="syntax">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of StringSyntaxAttribute by passing the parameter <paramref name="syntax"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>Used to indicate a byref escapes and is not scoped.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>Indicates that an API is experimental and it may change in the future.</summary>
            <remarks><para>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </para></remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the
            ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">
            The ID that the compiler will use when reporting a use of the API the attribute applies to.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks><para>
            The diagnostic ID is shown in build output for warnings and errors.
            This property represents the unique ID that can be used to suppress the warnings or errors, if needed.
            </para></remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation. The API accepts a format string
            instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks><para>
            An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.
            </para></remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of ExperimentalAttribute by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="diagnosticId">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of ExperimentalAttribute by passing the parameter <paramref name="diagnosticId"/> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>Provides a read-only, covariant view of a generic list.</summary>
            <typeparam name="T">The type of item on the list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>Gets the amount of items on the list.</summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>Represents a generic read-only collection of key/value pairs.</summary>
            <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
            <param name="key">The key to locate.</param>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <param name="key">The key to locate.</param>
            <returns>
            <see langword="true"/> if the read-only dictionary contains an element that has the specified key;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary>
            <param name="key">The key to locate.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the <paramref name="value"/> parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            interface contains an element that has the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>Performs an index operation on the list.</summary>
            <param name="index">The item to retrieve.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlySet`1">
            <summary>Provides a readonly abstraction of a set.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Contains(`0)">
            <summary>Determines if the set contains a specific item.</summary>
            <param name="item">The item to check if the set contains.</param>
            <returns><see langword="true"/> if found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the current set is a proper subset of other; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the collection is a proper superset of other; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a subset of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true"/> if the current set is a subset of other; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determine whether the current set is a super set of a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns><see langword="true"/> if the current set is a subset of other; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the current set and other share at least one common element;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            <see langword="true"/> if the current set is equal to other; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">other is <see langword="null"/>.</exception>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>Provides the base interface for the abstraction of sets.</summary>
            <remarks><para>
            This interface provides methods for implementing sets,
            which are collections that have unique elements and specific operations.
            </para></remarks>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>Removes all elements in the specified collection from the current set.</summary>
            <remarks><para>
            This method is an O(<c>n</c>) operation,
            where <c>n</c> is the number of elements in the <paramref name="other"/> parameter.
            </para></remarks>
            <param name="other">The collection of items to remove from the set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <remarks><para>This method ignores any duplicate elements in other.</para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present
            either in the current set or in the specified collection, but not both.
            </summary>
            <remarks><para>Any duplicate elements in <paramref name="other"/> are ignored.</para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in the current set,
            in the specified collection, or in both.
            </summary>
            <remarks><para>Any duplicate elements in <paramref name="other"/> are ignored.</para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>
            Adds an element to the current set and returns a value to indicate if the element was successfully added.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>
            <see langword="true"/> if the element is added to the set;
            <see langword="false"/> if the element is already in the set.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
            <remarks><para>
            If the current set is a proper superset of <paramref name="other"/>,
            <paramref name="other"/> must have at least one element that the current set does not have.
            </para><para>
            An empty set is a proper superset of any other collection. Therefore, this method returns <see langword="true"/>
            if the current set is empty, unless the <paramref name="other"/> parameter is also an empty set.
            </para><para>
            This method always returns <see langword="false"/> if the current set is
            less than or equal to the number of elements in <paramref name="other"/>.
            </para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <returns>
            <see langword="true"/> if the current set is a proper superset of <paramref name="other"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
            <remarks><para>
            If the current set is a proper subset of <paramref name="other"/>,
            <paramref name="other"/> must have at least one element that the current set does not have.
            </para><para>
            An empty set is a proper subset of any other collection. Therefore, this method returns <see langword="true"/>
            if the current set is empty, unless the <paramref name="other"/> parameter is also an empty set.
            </para><para>
            This method always returns <see langword="false"/> if the current set has
            more or the same number of elements than <paramref name="other"/>.
            </para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <returns>
            <see langword="true"/> if the current set is a proper subset of <paramref name="other"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether a set is a subset of a specified collection.</summary>
            <remarks><para>
            If <paramref name="other"/> contains the same elements as the current set,
            the current set is still considered a subset of <paramref name="other"/>.
            </para><para>
            This method always returns <see langword="false"/> if the current
            set has elements that are not in <paramref name="other"/>.
            </para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <returns>
            <see langword="true"/> if the current set is a subset of <paramref name="other"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set is a superset of a specified collection.</summary>
            <remarks><para>
            If <paramref name="other"/> contains the same elements as the current set,
            the current set is still considered a superset of <paramref name="other"/>.
            </para><para>
            This method always returns <see langword="false"/> if the current
            set has fewer elements than <paramref name="other"/>.
            </para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <returns>
            <see langword="true"/> if the current set is a superset of <paramref name="other"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <remarks><para>Any duplicate elements in <paramref name="other"/> are ignored.</para></remarks>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <returns>
            <see langword="true"/> if the current set and <paramref name="other"/> share at least one common element;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
            <returns>
            <see langword="true"/> if the current set is equal to <paramref name="other"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:System.Numerics.BitOperations">
            <summary>
            Utility methods for intrinsic bit-twiddling operations.
            The methods use hardware intrinsics when available on the underlying platform,
            otherwise they use optimized software fallbacks.
            </summary>
        </member>
        <member name="M:System.Numerics.BitOperations.IsPow2(System.Int32)">
            <summary>Evaluate whether a given integral value is a power of 2.</summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if the <paramref name="value"/> is a power of 2; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:System.Numerics.BitOperations.IsPow2(System.UInt32)">
            <inheritdoc cref="M:System.Numerics.BitOperations.IsPow2(System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperations.IsPow2(System.Int64)">
            <inheritdoc cref="M:System.Numerics.BitOperations.IsPow2(System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperations.IsPow2(System.UInt64)">
            <inheritdoc cref="M:System.Numerics.BitOperations.IsPow2(System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperations.IsPow2(System.IntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperations.IsPow2(System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperations.IsPow2(System.UIntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperations.IsPow2(System.Int32)"/>
        </member>
        <member name="M:System.Numerics.BitOperations.PopCount(System.UIntPtr)">
            <summary>Returns the population count (number of bits set) of a mask.</summary>
            <remarks><para>Similar in behavior to the x86 instruction POPCNT.</para></remarks>
            <param name="value">The value.</param>
            <returns>The population count of the mask.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
            <summary>Returns the population count (number of bits set) of an unsigned 32-integer mask.</summary>
            <remarks><para>Similar in behavior to the x86 instruction POPCNT.</para></remarks>
            <param name="value">The value.</param>
            <returns>The population count of the mask.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
            <summary>Returns the population count (number of bits set) of an unsigned 64-integer mask.</summary>
            <remarks><para>Similar in behavior to the x86 instruction POPCNT.</para></remarks>
            <param name="value">The value.</param>
            <returns>The population count of the mask.</returns>
        </member>
        <member name="M:System.Numerics.BitOperations.RoundUpToPowerOf2(System.UInt32)">
            <summary>Round the given integral value up to a power of 2.</summary>
            <remarks><para>
            The fallback implementation is based on
            <a href="https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2">
            Bit Twiddling Hacks by Sean Eron Anderson
            </a>.
            </para></remarks>
            <param name="value">The value.</param>
            <returns>
            The smallest power of 2 which is greater than or equal to <paramref name="value"/>.
            If <paramref name="value"/> is 0 or the result overflows, returns 0.
            </returns>
        </member>
        <member name="M:System.Numerics.BitOperations.RoundUpToPowerOf2(System.UInt64)">
            <inheritdoc cref="M:System.Numerics.BitOperations.RoundUpToPowerOf2(System.UInt32)"/>
        </member>
        <member name="M:System.Numerics.BitOperations.RoundUpToPowerOf2(System.UIntPtr)">
            <inheritdoc cref="M:System.Numerics.BitOperations.RoundUpToPowerOf2(System.UInt32)"/>
        </member>
        <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
            <summary>
            Specifies constants that define the details of how a method is implemented.
            This enumeration supports a bitwise combination of its member values.
            </summary>
            <remarks><para>
            This enumeration is used with the <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute"/> attribute.
            You can specify multiple <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/> values by using the bitwise OR operator.
            </para></remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
            <summary>The method is implemented in unmanaged code.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
            <summary>
            The method cannot be inlined.
            Inlining is an optimization by which a method call is replaced with the method body.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
            <summary>The method is declared, but its implementation is provided elsewhere.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
            <summary>
            The method can be executed by only one thread at a time.
            Static methods lock on the type, whereas instance methods lock on the instance.
            Only one thread can execute in any of the instance functions,
            and only one thread can execute in any of a class's static functions.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
            <summary>
            The method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe)
            when debugging possible code generation problems.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
            <summary>The method signature is exported exactly as declared.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
            <summary>The method should be inlined if possible.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization">
            <summary>The method contains code that should always be optimized by the just-in-time (JIT) compiler.</summary>
            <remarks><para>
            Use this attribute if running an unoptimized version of the method has undesirable effects,
            for instance causing too much overhead or extra memory allocation.
            </para><para>
            Methods with this attribute may not have optimal code generation.
            They bypass the first tier of Tiered Compilation and therefore can't benefit from optimizations that rely on
            tiering, for example, Dynamic PGO or optimizations based on initialized classes.
            </para></remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
            <summary>
            The call is internal, that is, it calls a method that's implemented within the common language runtime.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterceptsLocationAttribute">
            <summary>Indicates that a location is intercepted by this method.</summary>
            <param name="filePath">The file path to the intercepted location.</param>
            <param name="line">The line number to the intercepted location.</param>
            <param name="character">The character number to the intercepted location.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterceptsLocationAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Indicates that a location is intercepted by this method.</summary>
            <param name="filePath">The file path to the intercepted location.</param>
            <param name="line">The line number to the intercepted location.</param>
            <param name="character">The character number to the intercepted location.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.CollectionBuilderAttribute">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/>
            method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks><para>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <c>ReadOnlySpan&lt;T&gt;</c> and returns an instance of the collection being built containing
            a copy of the data from that span. In future releases of .NET, additional patterns may be supported.
            </para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/>
            method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks><para>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <c>ReadOnlySpan&lt;T&gt;</c> and returns an instance of the collection being built containing
            a copy of the data from that span. In future releases of .NET, additional patterns may be supported.
            </para></remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>Gets the type of the builder to use to construct the collection.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>Gets the name of the method on the builder to use to construct the collection.</summary>
            <remarks><para>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/> class.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.op_Implicit(System.Type)~System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of AsyncMethodBuilderAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)"/>.
            </summary>
            <param name="builderType">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of AsyncMethodBuilderAttribute by passing the parameter <paramref name="builderType"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InterpolatedStringHandlerArgumentAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="argument">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InterpolatedStringHandlerArgumentAttribute by passing the parameter <paramref name="argument"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.op_Implicit(System.String[])~System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InterpolatedStringHandlerArgumentAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])"/>.
            </summary>
            <param name="arguments">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InterpolatedStringHandlerArgumentAttribute by passing the parameter <paramref name="arguments"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called in its containing module's initializer.
            </summary>
            <remarks><para>
            When one or more valid methods with this attribute are found in a compilation,
            the compiler will emit a module initializer that calls each of the attributed methods.<br />
            Certain requirements are imposed on any method targeted with this attribute:
            </para><list type="bullet">
            <item><description>The method must be <see langword="static"/>.</description></item>
            <item><description>
            The method must be an ordinary member method, as opposed to a property accessor,
            constructor, local function, and so on.
            </description></item>
            <item><description>The method must be parameterless..</description></item>
            <item><description>The method must return <see langword="void"/>.</description></item>
            <item><description>The method must not be generic or be contained in a generic type.</description></item>
            <item><description>
            The method's effective accessibility must be <see langword="internal"/> or <see langword="public"/>.
            </description></item>
            </list><para>
            For more information, see the
            <a href="https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer">
            ECMA specification
            </a>.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/> attribute to an optional parameter that has a default value.
            You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Indicates that a parameter captures the expression passed for another parameter as a string.</summary>
            <remarks><para>This attribute is implemented in the compiler for C# 10 and later versions only.</para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.</summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>Gets the name of the parameter whose expression should be captured as a string.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of CallerArgumentExpressionAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="parameterName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of CallerArgumentExpressionAttribute by passing the parameter <paramref name="parameterName"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks><para>
            This attribute is unsafe because it may reveal uninitialized memory to the application in certain
            instances (e.g., reading from uninitialized stackalloc'd memory). If applied to a method directly,
            the attribute applies to that method and all nested functions (lambdas, local functions) below it.
            If applied to a type or module, it applies to all methods nested inside. This attribute is intentionally
            not permitted on assemblies. Use at the module level instead to apply to multiple type declarations.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Indicates that an API is in preview. This attribute allows call sites to be
            flagged with a diagnostic that indicates that a preview feature is used.
            Authors can use this attribute to ship preview features in their assemblies.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Message">
            <summary>Gets the optional message associated with this attribute instance.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Url">
            <summary>Gets or sets the optional URL associated with this attribute instance.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of RequiresPreviewFeaturesAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="message">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of RequiresPreviewFeaturesAttribute by passing the parameter <paramref name="message"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is
            required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> class.</summary>
            <param name="featureName">The name of the compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>Gets the name of the compiler feature.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the compiler can choose to allow access to the location
            where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of CompilerFeatureRequiredAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="featureName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of CompilerFeatureRequiredAttribute by passing the parameter <paramref name="featureName"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineArrayAttribute.Length">
            <summary>Gets the length of the inlined array.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.op_Implicit(System.Int32)~System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InlineArrayAttribute by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)"/>.
            </summary>
            <param name="length">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InlineArrayAttribute by passing the parameter <paramref name="length"/> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)"/>.
            </returns>
        </member>
        <member name="T:System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Instructs the System.Text.RegularExpressions source generator to
            generate an implementation of the specified regular expression.
            </summary>
            <remarks>
            <para>
            The generator associated with this attribute only supports C#. It only supplies an implementation when applied
            to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </para>
            <para>
            When the <see cref="T:System.Text.RegularExpressions.Regex"/> supports case-insensitive matches (either by passing
            <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> or using the inline <c>(?i)</c> switch in the pattern) the regex engines
            will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one.
            For example, given the pattern <c>abc</c>, the engines will transform it to the equivalent pattern
            <c>[Aa][Bb][Cc]</c>. The equivalences found in this internal casing table can change over time, for example in
            the case new characters are added to a new version of Unicode. When using the source generator, this
            transformation happens at compile time, which means the casing table used to find the equivalences will depend
            on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex"/> engines, which
            perform this transformation at run-time, meaning they will always use casing table for the current runtime.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/> class with the specified pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">
            Windows
            </a>.
            Culture names follow the standard defined by <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>.
            In addition, starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.</param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">
            Windows
            </a>.
            Culture names follow the standard defined by <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>.
            In addition, starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds">
            <summary>
            Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName">
            <summary>Gets the name of the culture to be used for case sensitive comparisons.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern">
            <summary>Gets the regular expression pattern to match.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options">
            <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.op_Implicit(System.String)~System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of GeneratedRegexAttribute by using the constructor
            <see cref="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="pattern">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of GeneratedRegexAttribute by passing the parameter <paramref name="pattern"/> to the constructor
            <see cref="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)"/>.
            </returns>
        </member>
        <member name="T:System.Span`1">
            <summary>Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory.</summary>
            <remarks><para>This type delegates the responsibility of pinning the pointer to the consumer.</para></remarks>
            <typeparam name="T">The type of items in the <see cref="T:System.Span`1"/>.</typeparam>
        </member>
        <member name="M:System.Span`1.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Span`1"/> struct from a specified number of
            <typeparamref name="T"/> elements starting at a specified memory address.
            </summary>
            <param name="pointer">A pointer to the starting address of a specified number of T elements in memory.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative.</exception>
        </member>
        <member name="P:System.Span`1.Item(System.Int32)">
            <summary>Gets the element at the specified zero-based index.</summary>
            <param name="index">The zero-based index of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than or equal to <see cref="P:System.Span`1.Length"/>.
            </exception>
        </member>
        <member name="P:System.Span`1.Empty">
            <summary>Gets an empty <see cref="T:System.Span`1"/> object.</summary>
        </member>
        <member name="P:System.Span`1.IsEmpty">
            <summary>Gets a value indicating whether the current <see cref="T:System.Span`1"/> is empty.</summary>
        </member>
        <member name="P:System.Span`1.Length">
            <summary>Gets the length of the current span.</summary>
        </member>
        <member name="P:System.Span`1.Pointer">
            <summary>Gets the pointer representing the first element in the buffer.</summary>
            <remarks><para>
            This property does not normally exist, and is used as a workaround polyfill for <c>GetPinnableReference</c>.
            When using this property, ensure you have the appropriate preprocessors for using a fixed expression instead.
            </para><para>
            Due to a specific runtime issue, this property cannot be generic, as this causes some JITs
            (notably .NET Framework) to be upset from its metadata and refuse to load. It is therefore expected of the
            caller to cast the returned pointer every time if needed.
            </para></remarks>
        </member>
        <member name="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})">
            <summary>Returns a value that indicates whether two <see cref="T:System.Span`1"/> objects are equal.</summary>
            <remarks><para>
            Two <see cref="T:System.Span`1"/> objects are equal if they have the same length and the corresponding elements of
            <paramref name="left"/> and <paramref name="right"/> point to the same memory. Note that the test for equality
            does <i>not</i> attempt to determine whether the contents are equal.
            </para></remarks>
            <param name="left">The first span to compare.</param>
            <param name="right">The second span to compare.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:System.Span`1"/> objects are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})">
            <summary>Returns a value that indicates whether two <see cref="T:System.Span`1"/> objects are not equal.</summary>
            <remarks><para>
            Two <see cref="T:System.Span`1"/> objects are equal if they have the same length and the corresponding elements of
            <paramref name="left"/> and <paramref name="right"/> point to the same memory.
            </para></remarks>
            <param name="left">The first span to compare.</param>
            <param name="right">The second span to compare.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:System.Span`1"/> objects are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}">
            <summary>Defines an implicit conversion of a <see cref="T:System.Span`1"/> to a <see cref="T:System.ReadOnlySpan`1"/>.</summary>
            <param name="span">The object to convert to a <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A read-only span that corresponds to the current instance.</returns>
        </member>
        <member name="M:System.Span`1.Clear">
            <summary>Clears the contents of this <see cref="T:System.Span`1"/> object.</summary>
            <remarks><para>
            The <see cref="M:System.Span`1.Clear"/> method sets the items in the <see cref="T:System.Span`1"/> object to their default values.
            It does not remove items from the <see cref="T:System.Span`1"/>.
            </para></remarks>
        </member>
        <member name="M:System.Span`1.CopyTo(System.Span{`0})">
            <summary>Copies the contents of this <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Span`1"/>.</summary>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="destination"/> is shorter than the source <see cref="T:System.Span`1"/>.
            </exception>
        </member>
        <member name="M:System.Span`1.CopyTo(System.Collections.Generic.IList{`0})">
            <summary>Copies the contents of this <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Collections.Generic.IList`1"/>.</summary>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.IList`1"/> object.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="destination"/> is shorter than the source <see cref="T:System.Span`1"/>.
            </exception>
        </member>
        <member name="M:System.Span`1.Fill(`0)">
            <summary>Fills the elements of this span with a specified value.</summary>
            <param name="value">The value to assign to each element of the span.</param>
        </member>
        <member name="M:System.Span`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Span`1.TryCopyTo(System.Span{`0})">
            <summary>
            Attempts to copy the current <see cref="T:System.Span`1"/> to a destination <see cref="T:System.Span`1"/>
            and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <remarks><para>
            This method copies all of <c>source</c> to <paramref name="destination"/> even if
            <c>source</c> and <paramref name="destination"/> overlap.
            If <paramref name="destination"/> is shorter than the source <see cref="T:System.Span`1"/>, this method returns
            <see langword="false"/>, and no data is written to <paramref name="destination"/>.
            </para></remarks>
            <param name="destination">The target of the copy operation.</param>
            <returns><see langword="true"/> if the copy operation succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Span`1.TryCopyTo(System.Collections.Generic.IList{`0})">
            <inheritdoc cref="M:System.Span`1.TryCopyTo(System.Span{`0})"/>
        </member>
        <member name="M:System.Span`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Span`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Span`1.GetEnumerator">
            <summary>Returns an enumerator of this <see cref="T:System.Span`1"/>.</summary>
            <returns>An enumerator for this span.</returns>
        </member>
        <member name="M:System.Span`1.Slice(System.Int32)">
            <summary>Forms a slice out of the current span that begins at a specified index.</summary>
            <param name="start">The index at which to begin the slice.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than zero or greater than <see cref="P:System.Span`1.Length"/>.
            </exception>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:System.Span`1.Slice(System.Int32,System.Int32)">
            <summary>Creates the slice of this buffer.</summary>
            <param name="start">The start of the slice from this buffer.</param>
            <param name="length">The length of the slice from this buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">An out-of-range buffer is created.</exception>
            <returns>The <see cref="T:System.Span`1"/> which is a slice of this buffer.</returns>
        </member>
        <member name="M:System.Span`1.ToArray">
            <summary>Copies the contents of this span into a new array.</summary>
            <remarks><para>
            This method performs a heap allocation and therefore should be avoided if possible.
            Heap allocations are expected in APIs that work with arrays.
            Using such APIs is unavoidable if an alternative API overhead that takes a <see cref="T:System.Span`1"/> does not exist.
            </para></remarks>
            <returns>An array containing the data in the current span.</returns>
        </member>
        <member name="T:System.Span`1.Enumerator">
            <summary>Enumerates the elements of a <see cref="T:System.Span`1"/>.</summary>
        </member>
        <member name="M:System.Span`1.Enumerator.#ctor(System.Span{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Span`1.Enumerator"/> struct.</summary>
            <param name="span">The buffer to peek through.</param>
        </member>
        <member name="P:System.Span`1.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current" />
        </member>
        <member name="M:System.Span`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:System.Span`1.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:System.Span`1.Enumerator.op_Implicit(System.Span{`0})~System.Span{`0}.Enumerator">
            <summary>
            Implicitly converts the parameter by creating the new instance of Enumerator by using the constructor
            <see cref="M:System.Span`1.Enumerator.#ctor(System.Span{`0})"/>.
            </summary>
            <param name="span">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of Enumerator by passing the parameter <paramref name="span"/> to the constructor
            <see cref="M:System.Span`1.Enumerator.#ctor(System.Span{`0})"/>.
            </returns>
        </member>
        <member name="T:System.ReadOnlySpan`1">
            <summary>Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory.</summary>
            <remarks><para>This type delegates the responsibility of pinning the pointer to the consumer.</para></remarks>
            <typeparam name="T">The type of items in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ReadOnlySpan`1"/> struct from a specified number of
            <typeparamref name="T"/> elements starting at a specified memory address.
            </summary>
            <param name="pointer">A pointer to the starting address of a specified number of T elements in memory.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is negative.</exception>
        </member>
        <member name="P:System.ReadOnlySpan`1.Item(System.Int32)">
            <summary>Gets the element at the specified zero-based index.</summary>
            <param name="index">The zero-based index of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length"/>.
            </exception>
        </member>
        <member name="P:System.ReadOnlySpan`1.Empty">
            <summary>Gets an empty <see cref="T:System.ReadOnlySpan`1"/> object.</summary>
        </member>
        <member name="P:System.ReadOnlySpan`1.IsEmpty">
            <summary>Gets a value indicating whether the current <see cref="T:System.ReadOnlySpan`1"/> is empty.</summary>
        </member>
        <member name="P:System.ReadOnlySpan`1.Length">
            <summary>Gets the length of the current span.</summary>
        </member>
        <member name="P:System.ReadOnlySpan`1.Pointer">
            <summary>Gets the pointer representing the first element in the buffer.</summary>
            <remarks><para>
            This property does not normally exist, and is used as a workaround polyfill for <c>GetPinnableReference</c>.
            When using this property, ensure you have the appropriate preprocessors for using a fixed expression instead.
            </para><para>
            Due to a specific runtime issue, this property cannot be generic, as this causes some JITs
            (notably .NET Framework) to be upset from its metadata and refuse to load. It is therefore expected of the
            caller to cast the returned pointer every time if needed.
            </para></remarks>
        </member>
        <member name="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
            <summary>Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1"/> objects are equal.</summary>
            <remarks><para>
            Two <see cref="T:System.ReadOnlySpan`1"/> objects are equal if they have the same length and the corresponding elements
            of <paramref name="left"/> and <paramref name="right"/> point to the same memory. Note that the test for
            equality does <i>not</i> attempt to determine whether the contents are equal.
            </para></remarks>
            <param name="left">The first span to compare.</param>
            <param name="right">The second span to compare.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:System.ReadOnlySpan`1"/> objects are equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
            <summary>
            Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1"/> objects are not equal.
            </summary>
            <remarks><para>
            Two <see cref="T:System.ReadOnlySpan`1"/> objects are equal if they have the same length and the corresponding elements
            of <paramref name="left"/> and <paramref name="right"/> point to the same memory.
            </para></remarks>
            <param name="left">The first span to compare.</param>
            <param name="right">The second span to compare.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:System.ReadOnlySpan`1"/> objects are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="destination"/> is shorter than the source <see cref="T:System.ReadOnlySpan`1"/>.
            </exception>
        </member>
        <member name="M:System.ReadOnlySpan`1.CopyTo(System.Collections.Generic.IList{`0})">
            <summary>Copies the contents of this <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Collections.Generic.IList`1"/>.</summary>
            <param name="destination">The destination <see cref="T:System.Collections.Generic.IList`1"/> object.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="destination"/> is shorter than the source <see cref="T:System.ReadOnlySpan`1"/>.
            </exception>
        </member>
        <member name="M:System.ReadOnlySpan`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})">
            <summary>
            Attempts to copy the current <see cref="T:System.ReadOnlySpan`1"/> to a destination <see cref="T:System.Span`1"/>
            and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <remarks><para>
            This method copies all of <c>source</c> to <paramref name="destination"/> even if
            <c>source</c> and <paramref name="destination"/> overlap.
            If <paramref name="destination"/> is shorter than the source <see cref="T:System.ReadOnlySpan`1"/>, this method returns
            <see langword="false"/>, and no data is written to <paramref name="destination"/>.
            </para></remarks>
            <param name="destination">The target of the copy operation.</param>
            <returns><see langword="true"/> if the copy operation succeeded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.TryCopyTo(System.Collections.Generic.IList{`0})">
            <inheritdoc cref="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})"/>
        </member>
        <member name="M:System.ReadOnlySpan`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.ReadOnlySpan`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.ReadOnlySpan`1.GetEnumerator">
            <summary>Returns an enumerator of this <see cref="T:System.ReadOnlySpan`1"/>.</summary>
            <returns>An enumerator for this span.</returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.Slice(System.Int32)">
            <summary>Forms a slice out of the current span that begins at a specified index.</summary>
            <param name="start">The index at which to begin the slice.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than zero or greater than <see cref="P:System.ReadOnlySpan`1.Length"/>.
            </exception>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)">
            <summary>Creates the slice of this buffer.</summary>
            <param name="start">The start of the slice from this buffer.</param>
            <param name="length">The length of the slice from this buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">An out-of-range buffer is created.</exception>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> which is a slice of this buffer.</returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.ToArray">
            <summary>Copies the contents of this span into a new array.</summary>
            <remarks><para>
            This method performs a heap allocation and therefore should be avoided if possible.
            Heap allocations are expected in APIs that work with arrays.
            Using such APIs is unavoidable if an alternative API overhead
            that takes a <see cref="T:System.ReadOnlySpan`1"/> does not exist.
            </para></remarks>
            <returns>An array containing the data in the current span.</returns>
        </member>
        <member name="T:System.ReadOnlySpan`1.Enumerator">
            <summary>Enumerates the elements of a <see cref="T:System.Span`1"/>.</summary>
        </member>
        <member name="M:System.ReadOnlySpan`1.Enumerator.#ctor(System.ReadOnlySpan{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.ReadOnlySpan`1.Enumerator"/> struct.</summary>
            <param name="span">The buffer to peek through.</param>
        </member>
        <member name="P:System.ReadOnlySpan`1.Enumerator.Current">
            <inheritdoc cref="P:System.Collections.Generic.IEnumerator`1.Current" />
        </member>
        <member name="M:System.ReadOnlySpan`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:System.ReadOnlySpan`1.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:System.ReadOnlySpan`1.Enumerator.op_Implicit(System.ReadOnlySpan{`0})~System.ReadOnlySpan{`0}.Enumerator">
            <summary>
            Implicitly converts the parameter by creating the new instance of Enumerator by using the constructor
            <see cref="M:System.ReadOnlySpan`1.Enumerator.#ctor(System.ReadOnlySpan{`0})"/>.
            </summary>
            <param name="span">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of Enumerator by passing the parameter <paramref name="span"/> to the constructor
            <see cref="M:System.ReadOnlySpan`1.Enumerator.#ctor(System.ReadOnlySpan{`0})"/>.
            </returns>
        </member>
        <member name="T:System.SpanDebugView`1">
            <summary>Represents a debug view to this span.</summary>
            <typeparam name="T">The type of element in the span.</typeparam>
        </member>
        <member name="M:System.SpanDebugView`1.#ctor(System.Span{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.SpanDebugView`1"/> class.</summary>
            <param name="span">The span to collect.</param>
        </member>
        <member name="M:System.SpanDebugView`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.SpanDebugView`1"/> class.</summary>
            <param name="span">The span to collect.</param>
        </member>
        <member name="P:System.SpanDebugView`1.Items">
            <summary>Gets the items of this span.</summary>
        </member>
        <member name="T:System.Int32TryFormatPolyfill">
            <summary>Provides the polyfill to <c>int.TryFormat</c>.</summary>
        </member>
        <member name="M:System.Int32TryFormatPolyfill.TryFormat(System.Int32,System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Tries to format the value of the current integer number instance into the provided span of characters.
            </summary>
            <param name="value">The instance.</param>
            <param name="destination">
            The span in which to write this instance's value formatted as a span of characters.
            </param>
            <param name="charsWritten">
            When this method returns, contains the number of characters that were written in <paramref name="destination"/>.
            </param>
            <param name="format">
            A span containing the characters that represent a standard or custom format
            string that defines the acceptable format for <paramref name="destination"/>.
            </param>
            <param name="provider">
            An optional object that supplies culture-specific formatting information for <paramref name="destination"/>.
            </param>
            <exception cref="T:System.NotSupportedException">The parameter <paramref name="format"/> isn't empty.</exception>
            <returns><see langword="true"/> if the formatting was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:System.TypeGetEnumUnderlyingTypePolyfill">
            <summary>Provides the polyfill to <c>Type.GetEnumUnderlyingType</c>.</summary>
        </member>
        <member name="M:System.TypeGetEnumUnderlyingTypePolyfill.GetEnumUnderlyingType(System.Type)">
            <summary>Returns the underlying type of the specified enumeration.</summary>
            <remarks><para>
            The <see cref="T:System.Enum"/> structure enables values to be represented as named constants.
            The data type of the enumeration's values is known as its underlying type. For example, the underlying type
            of the <see cref="T:System.DayOfWeek"/> enumeration, which consists of constants that represent each day of the week
            (<see cref="F:System.DayOfWeek.Monday"/>, <see cref="F:System.DayOfWeek.Tuesday"/>, and so on), is <see cref="T:System.Int32"/>.
            </para></remarks>
            <param name="enumType">The enumeration whose underlying type will be retrieved.</param>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>.</exception>
            <returns>The underlying type of <paramref name="enumType"/>.</returns>
        </member>
        <member name="T:Emik.Morsels.Force">
            <summary>Extension methods to force full enumerations.</summary>
        </member>
        <member name="M:Emik.Morsels.Force.Enumerate(System.Collections.IEnumerable)">
            <summary>Forces an enumeration, meant for enumerations that have side effects.</summary>
            <param name="iterable">The collection of items to go through one-by-one.</param>
        </member>
        <member name="M:Emik.Morsels.Force.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Forces an enumeration, meant for enumerations that have side effects.</summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="iterable">The collection of items to go through one-by-one.</param>
        </member>
        <member name="T:Emik.Morsels.EnumMath">
            <summary>Provides methods to do math on enums without overhead from boxing.</summary>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Has``1(``0,``0)">
            <summary>Checks if the left-hand side implements the right-hand side.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if the parameter <paramref name="left"/> has the values
            of the parameter <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.AsInt``1(``0)">
            <summary>Performs a conversion operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="value">The value.</param>
            <returns>The <see cref="T:System.Int32"/> cast of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.GetValues``1">
            <summary>Gets the values of an enum cached and strongly-typed.</summary>
            <typeparam name="T">The type of enum to get the values from.</typeparam>
            <returns>All values in the type parameter <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.As``1(System.Int32)">
            <summary>Performs a conversion operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="value">The value.</param>
            <returns>The <typeparamref name="T"/> cast of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Negate``1(``0)">
            <summary>Performs a negation operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="value">The value.</param>
            <returns>The negated value of the parameter <paramref name="value"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Predecessor``1(``0)">
            <summary>Performs an decrement operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="value">The value.</param>
            <returns>The predecessor of the parameter <paramref name="value"/>; the number immediately before it.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Successor``1(``0)">
            <summary>Performs a increment operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="value">The value.</param>
            <returns>The predecessor of the parameter <paramref name="value"/>; the number immediately after it.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Add``1(``0,``0)">
            <summary>Performs an addition operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The sum of the parameters <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Subtract``1(``0,``0)">
            <summary>Performs a subtraction operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The difference of the parameters <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Multiply``1(``0,``0)">
            <summary>Performs a multiplication operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The product of the parameters <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Divide``1(``0,``0)">
            <summary>Performs a division operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The quotient of the parameters <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Modulo``1(``0,``0)">
            <summary>Performs a modulo operation.</summary>
            <remarks><para>The conversion and operation are unchecked, and treated as <see cref="T:System.Int32"/>.</para></remarks>
            <typeparam name="T">The type of <see cref="T:System.Enum"/> to perform the operation on.</typeparam>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The remainder of the parameters <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Product``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Computes the product of a sequence of <typeparamref name="T"/> values.</summary>
            <typeparam name="T">The type of sequence.</typeparam>
            <param name="source">A sequence of <typeparamref name="T"/> values to calculate the product of.</param>
            <returns>The product of the values in the sequence.</returns>
        </member>
        <member name="M:Emik.Morsels.EnumMath.Sum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Computes the sum of a sequence of <typeparamref name="T"/> values.</summary>
            <typeparam name="T">The type of sequence.</typeparam>
            <param name="source">A sequence of <typeparamref name="T"/> values to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="T:Emik.Morsels.DigitCounter">
            <summary>Extension methods to count digits in numbers.</summary>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)">
            <summary>Gets the amount of digits of the number.</summary>
            <param name="number">The number to count.</param>
            <returns>The amount of digits in the parameter <paramref name="number"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.SByte)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.UInt16)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.Int16)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.UInt32)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.Int32)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.UInt64)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="M:Emik.Morsels.DigitCounter.DigitCount(System.Int64)">
            <inheritdoc cref="M:Emik.Morsels.DigitCounter.DigitCount(System.Byte)"/>
        </member>
        <member name="T:Emik.Morsels.VersionDeconstructors">
            <summary>Methods that deconstructs <see cref="T:System.Version"/> instances.</summary>
        </member>
        <member name="M:Emik.Morsels.VersionDeconstructors.Deconstruct(System.Version,System.Int32@,System.Int32@)">
            <summary>Deconstructs this instance into the major and minor versions.</summary>
            <remarks><para>
            If the passed in value is <see langword="null"/>, all out parameters are zero-initialized.
            </para></remarks>
            <param name="version">The <see cref="T:System.Version"/> to deconstruct.</param>
            <param name="major">The resulting major version.</param>
            <param name="minor">The resulting minor version.</param>
        </member>
        <member name="M:Emik.Morsels.VersionDeconstructors.Deconstruct(System.Version,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Deconstructs this instance into the major, minor, and build versions.</summary>
            <remarks><para>
            If the passed in value is <see langword="null"/>, all out parameters are zero-initialized.
            </para></remarks>
            <param name="version">The <see cref="T:System.Version"/> to deconstruct.</param>
            <param name="major">The resulting major version.</param>
            <param name="minor">The resulting minor version.</param>
            <param name="build">The resulting build version.</param>
        </member>
        <member name="M:Emik.Morsels.VersionDeconstructors.Deconstruct(System.Version,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Deconstructs this instance into the major, minor, build, and revision versions.</summary>
            <remarks><para>
            If the passed in value is <see langword="null"/>, all out parameters are zero-initialized.
            </para></remarks>
            <param name="version">The <see cref="T:System.Version"/> to deconstruct.</param>
            <param name="major">The resulting major version.</param>
            <param name="minor">The resulting minor version.</param>
            <param name="build">The resulting build version.</param>
            <param name="revision">The resulting revision version.</param>
        </member>
        <member name="M:Emik.Morsels.VersionDeconstructors.Deconstruct(System.Version,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs this instance into the major, minor, build, major revision, and minor revision versions.
            </summary>
            <remarks><para>
            If the passed in value is <see langword="null"/>, all out parameters are zero-initialized.
            </para></remarks>
            <param name="version">The <see cref="T:System.Version"/> to deconstruct.</param>
            <param name="major">The resulting major version.</param>
            <param name="minor">The resulting minor version.</param>
            <param name="build">The resulting build version.</param>
            <param name="majorRevision">The resulting major revision version.</param>
            <param name="minorRevision">The resulting minor revision version.</param>
        </member>
        <member name="T:Emik.Morsels.MatrixFactory">
            <summary>Extension methods that act as factories for <see cref="T:Emik.Morsels.Matrix`1"/>.</summary>
        </member>
        <member name="M:Emik.Morsels.MatrixFactory.AsMatrix``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Wraps an <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:Emik.Morsels.Matrix`1"/>.</summary>
            <typeparam name="T">The type of the <paramref name="iterator"/> and the <see langword="return"/>.</typeparam>
            <param name="iterator">The collection to turn into a <see cref="T:Emik.Morsels.Matrix`1"/>.</param>
            <param name="countPerList">The length per count.</param>
            <returns>A <see cref="T:Emik.Morsels.Matrix`1"/> that wraps the parameter <paramref name="iterator"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.MatrixFactory.AsMatrix``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32})">
            <summary>Wraps an <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:Emik.Morsels.Matrix`1"/>.</summary>
            <typeparam name="T">The type of the <paramref name="iterator"/> and the <see langword="return"/>.</typeparam>
            <param name="iterator">The collection to turn into a <see cref="T:Emik.Morsels.Matrix`1"/>.</param>
            <param name="countPerList">The length per count.</param>
            <returns>A <see cref="T:Emik.Morsels.Matrix`1"/> that wraps the parameter <paramref name="iterator"/>.</returns>
        </member>
        <member name="T:Emik.Morsels.Matrix`1">
            <summary>Maps a 1-dimensional collection as 2-dimensional.</summary>
            <typeparam name="T">The type of item within the list.</typeparam>
        </member>
        <member name="T:Emik.Morsels.Matrix`1.Slice">
            <summary>Represents a slice of a matrix.</summary>
            <param name="matrix">The matrix to reference.</param>
            <param name="ordinal">The first index of the matrix.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.#ctor(Emik.Morsels.Matrix{`0},System.Int32)">
            <summary>Represents a slice of a matrix.</summary>
            <param name="matrix">The matrix to reference.</param>
            <param name="ordinal">The first index of the matrix.</param>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Slice.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Slice.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Slice.Count">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Clear">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Collections.Generic.IList{`0},System.Func{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Func{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Func{System.Collections.Generic.IList{`0}},System.Func{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.CountPerList">
            <summary>Gets the amount of items per list.</summary>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.List">
            <summary>Gets the encapsulated list.</summary>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count" />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Add(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Contains(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.CopyTo(System.Collections.Generic.IList{`0}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Insert(System.Int32,System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Remove(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.IndexOf(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Emik.MatchAttribute">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="M:Emik.MatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Initializes a new instance of the <see cref="T:Emik.MatchAttribute"/> class.</summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">The bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="P:Emik.MatchAttribute.Pattern">
            <summary>Gets the regular expression to match.</summary>
        </member>
        <member name="P:Emik.MatchAttribute.Options">
            <summary>Gets the bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.RegexDeconstructors">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="T:Emik.ChoiceAttribute">
            <summary>
            Indicates to Emik.SourceGenerators.Choices to extend the type, transforming it to a disjoint union.
            </summary>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="set">The type of fields that define the annotated union.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="set">The type of fields that define the annotated union.</param>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute"/> class.
            </summary>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
            <param name="set">The type of fields that define the annotated union.</param>
        </member>
        <member name="P:Emik.ChoiceAttribute.IsPubliclyMutable">
            <summary>
            When specified, determines whether the type is mutable publicly.
            </summary>
        </member>
        <member name="P:Emik.ChoiceAttribute.Set">
            <summary>
            When specified, gets the set of fields that define the annotated union.
            </summary>
        </member>
        <member name="T:Emik.NoImplicitOperatorAttribute">
            <summary>
            Prevents the analyzer from generating the implicit conversion into this constructor.
            </summary>
        </member>
        <member name="T:Emik.NoStructuralTypingAttribute">
            <summary>Signifies to ignore this when determining potential interfaces that can be implemented.</summary>
            <remarks>
            <para>
            The behavior of this attribute depends on what you apply it on:
            </para>
            <list type="table">
               <listheader>
                   <term>Target</term>
                   <description>Behavior</description>
               </listheader>
               <item>
                   <term>Type Member</term>
                   <description>Ignores the type altogether. No generation is ever performed on it.</description>
               </item>
               <item>
                   <term>Member</term>
                   <description>Ignores only this particular member when evaluating potential interfaces.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="T:InlineMethod.InlineAttribute">
            <summary>Method to inline.</summary>
        </member>
        <member name="M:InlineMethod.InlineAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:InlineMethod.InlineAttribute"/> class.</summary>
            <param name="remove">The value to set.</param>
        </member>
        <member name="P:InlineMethod.InlineAttribute.Remove">
            <summary>Gets a value indicating whether to remove the method after inlining, if private.</summary>
        </member>
        <member name="M:InlineMethod.InlineAttribute.op_Implicit(System.Boolean)~InlineMethod.InlineAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of InlineAttribute by using the constructor
            <see cref="M:InlineMethod.InlineAttribute.#ctor(System.Boolean)"/>.
            </summary>
            <param name="remove">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of InlineAttribute by passing the parameter <paramref name="remove"/> to the constructor
            <see cref="M:InlineMethod.InlineAttribute.#ctor(System.Boolean)"/>.
            </returns>
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:NullGuard.NullGuardAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
            <param name="flags">
            The <see cref="T:NullGuard.ValidationFlags"/> to use for the target this attribute is being applied to.
            </param>
        </member>
        <member name="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
            <param name="flags">
            The <see cref="T:NullGuard.ValidationFlags"/> to use for the target this attribute is being applied to.
            </param>
        </member>
        <member name="M:NullGuard.NullGuardAttribute.op_Implicit(NullGuard.ValidationFlags)~NullGuard.NullGuardAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of NullGuardAttribute by using the constructor
            <see cref="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)"/>.
            </summary>
            <param name="flags">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of NullGuardAttribute by passing the parameter <paramref name="flags"/> to the constructor
            <see cref="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)"/>.
            </returns>
        </member>
        <member name="T:NullGuard.ValidationFlags">
            <summary>Used by <see cref="T:NullGuard.NullGuardAttribute"/> to target specific categories of members.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.None">
            <summary>Does nothing.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Properties">
            <summary>
            Adds null guard checks to properties getter (cannot return null) and setter (cannot be set to null).
            </summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Arguments">
            <summary>
            Method arguments are checked to make sure they are not null. This only
            applies to normal arguments, and the incoming value of a ref argument.
            </summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.AllPublicArguments">
            <summary>Processes all methods (arguments and return values) and properties.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.OutValues">
            <summary>Out and ref arguments of a method are checked for null just before the method returns.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.ReturnValues">
            <summary>Checks the return value of a method for null.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Methods">
            <summary>Processes all arguments (normal, out and ref) and return values of methods.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.AllPublic">
            <summary>Checks everything (properties, all method args and return values).</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.NonPublic">
            <summary>Applies the other flags to all non-public members as well.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.All">
            <summary>Wildcard.</summary>
        </member>
        <member name="T:Wawa.Modules.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.Modules.Internals.Globals.BitsInByte">
            <summary>The number of bits in a byte.</summary>
        </member>
        <member name="F:Wawa.Modules.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="M:Wawa.Modules.Internals.Globals.ToReadOnly``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}@)">
            <summary>Enumerates a sequence twice with a selector and produces an immutable array of its contents.</summary>
            <typeparam name="TSource">The type of element in the inputting sequence.</typeparam>
            <typeparam name="TResult">The type of element in the resulting sequence.</typeparam>
            <param name="items">The sequence to enumerate.</param>
            <param name="selector">The selector for each item.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="T:Wawa.Modules.ISolvable">
            <summary>
            Interface for Twitch Plays auto-solvers. Used by <see cref="T:System.Reflection.Module"/> to abstractly communicate
            with Twitch Plays solvers without importing the namespace.
            </summary>
        </member>
        <member name="P:Wawa.Modules.ISolvable.IsTP">
            <summary>Gets a value indicating whether Twitch Plays is currently active.</summary>
            <remarks><para>
            This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="M:Wawa.Modules.ISolvable.ForceTPSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks><para>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </para></remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="T:Wawa.Modules.ModdedModule">
            <summary>
            A <see cref="T:UnityEngine.Component"/> that handles general Keep Talking and Nobody Explodes modded module behaviour.
            </summary>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Children">
            <summary>Gets the children of the top-level selectable.</summary>
            <exception cref="T:UnityEngine.MissingComponentException">
            There is no <see cref="T:KMSelectable"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Matrix">
            <summary>Gets the children of the top-level selectable.</summary>
            <remarks><para>
            Unlike <see cref="P:Wawa.Modules.ModdedModule.Children"/>, this returns a 2-dimensional list by mapping
            it with inference from <see cref="F:KMSelectable.ChildRowLength"/>.
            </para></remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:KMSelectable"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/> has a
            <see cref="F:KMSelectable.ChildRowLength"/> value of 0.
            </exception>
            <exception cref="T:UnityEngine.MissingComponentException">
            There is no <see cref="T:KMSelectable"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Status">
            <summary>Gets the current solve/strike status of the module.</summary>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Id">
            <summary>
            Gets the mod id. Override this if you are working with an assembly with a different name than your mod id.
            </summary>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Awake">
            <summary>Logs version numbers. Be sure to call this method if you are implementing Awake.</summary>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnDisable">
            <summary>
            Unsubscribes from <see cref="E:UnityEngine.Application.logMessageReceived"/>, <see cref="F:KMBombModule.OnActivate"/>,
            <see cref="F:KMBombModule.OnPass"/>, and <see cref="F:KMBombModule.OnStrike"/>.
            </summary>
            <remarks><para>It is recommended to invoke the base method when overriding this method.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnEnable">
            <summary>
            Subscribes from <see cref="E:UnityEngine.Application.logMessageReceived"/>, <see cref="F:KMBombModule.OnActivate"/>,
            <see cref="F:KMBombModule.OnPass"/>, and <see cref="F:KMBombModule.OnStrike"/>.
            </summary>
            <remarks><para>It is recommended to invoke the base method when overriding this method.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Play(Wawa.Modules.Sound[])">
            <summary>Plays one or more sounds from the module <see cref="T:UnityEngine.Transform"/>.</summary>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Play(UnityEngine.Transform,Wawa.Modules.Sound[])">
            <summary>Plays one or more sounds from a specified <see cref="T:UnityEngine.Transform"/>.</summary>
            <param name="location">The source of the sound.</param>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.PlayEnum``1(``0,UnityEngine.Transform)">
            <summary>Plays one or more sounds from a specified <see cref="T:UnityEngine.Transform"/>.</summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="sounds">The sounds to play.</param>
            <param name="location">The source of the sound.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Shake(KMSelectable,System.Single,Wawa.Modules.Sound[])">
            <summary>Plays sounds and shakes the bomb from a selectable.</summary>
            <param name="selectable">The source of the interaction punch and sound source.</param>
            <param name="intensityModifier">The intensity of the interaction punch.</param>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="selectable"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Solve(System.String,System.Object[])">
            <summary>Solves the module.</summary>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The value <see langword="default"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])">
            <summary>Strikes the module.</summary>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The value <see langword="default"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log(System.String)">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <param name="format">The value to log.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="logType">The kind of logging method to invoke.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log``1(``0,System.Object[])">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower(System.String)">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <param name="format">The value to log.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower``1(``0,UnityEngine.LogType)">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="logType">The kind of logging method to invoke.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower``1(``0,System.Object[])">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnActivate">
            <summary>The method that is called when the lights are turned on. Automatically hooked in Awake.</summary>
            <remarks><para>The base method doesn't do anything; Calling this base method is a no-op.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnException(System.String)">
            <summary>
            The method that is called when an unhandled <see cref="T:System.Exception"/> is thrown by this module type.
            </summary>
            <param name="message">The message of the <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:Wawa.Modules.Sound">
            <summary>
            Encapsulates a modded or vanilla sound effect, with methods to play the sound, and allowing you to extend
            into the <see cref="T:KMAudio.KMAudioRef"/> instance that spawns from playing a sound effect.
            </summary>
            <content>Static properties for each sound effect from the vanilla game.</content>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.Sound"/> class.</summary>
            <param name="sound">The name of the modded sound to use.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(UnityEngine.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Wawa.Modules.Sound"/> class. Uses the name of the <see cref="T:UnityEngine.AudioClip"/>.
            </summary>
            <param name="sound">The <see cref="T:UnityEngine.Object"/> of the modded sound to use, getting its name.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(KMSoundOverride.SoundEffect)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.Sound"/> class.</summary>
            <param name="sound">The vanilla sound to use.</param>
        </member>
        <member name="P:Wawa.Modules.Sound.Modded">
            <summary>
            Gets the modded sound passed in as <see cref="T:Wawa.Optionals.Maybe`1"/> due to ambiguity in this value being set.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Vanilla">
            <summary>
            Gets the vanilla sound passed in as <see cref="T:Wawa.Optionals.Maybe`1"/> due to ambiguity in this value being set.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Reference">
            <summary>Gets the instance of the <see cref="T:KMAudio.KMAudioRef"/> created from playing a sound.</summary>
        </member>
        <member name="M:Wawa.Modules.Sound.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.GetHashCode(Wawa.Modules.Sound)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(Wawa.Modules.Sound)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Implicit(System.String)~Wawa.Modules.Sound">
            <summary>Implicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:System.String"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Explicit(UnityEngine.Object)~Wawa.Modules.Sound">
            <summary>Explicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:UnityEngine.Object"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Implicit(KMSoundOverride.SoundEffect)~Wawa.Modules.Sound">
            <summary>Implicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Equality(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances contain the same values, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Inequality(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromString(System.String)">
            <summary>Converts the <see cref="T:System.String"/> to a <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/>.</summary>
            <param name="sound">The <see cref="T:System.String"/> instance to convert.</param>
            <returns>A <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/> instance encapsulating <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromObject(UnityEngine.Object)">
            <summary>Converts the <see cref="T:UnityEngine.Object"/> to a <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/>.</summary>
            <param name="sound">The <see cref="T:UnityEngine.Object"/> instance to convert.</param>
            <returns>A <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/> instance encapsulating <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromSoundEffect(KMSoundOverride.SoundEffect)">
            <summary>Converts the <see cref="T:KMSoundOverride.SoundEffect"/> to a <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/>.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect"/> instance to convert.</param>
            <returns>A <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/> instance encapsulating <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Wawa.Modules.Sound.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Wawa.Modules.Sound.Vanillas">
            <summary>Gets all vanilla sounds from the base game.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.AlarmClockBeep">
            <summary>Gets the sound that plays when the alarm clock goes off. This sound loops.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.AlarmClockSnooze">
            <summary>Gets the sound that plays when you hit snooze button on the alarm clock.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BigButtonPress">
            <summary>Gets the sound that plays when pressing down the button on the Big Button vanilla module.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BigButtonRelease">
            <summary>Gets the sound that plays when releasing the button on the Big Button vanilla module.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BinderDrop">
            <summary>Gets the sound that plays as the mission binder hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombDefused">
            <summary>
            Gets the sound that plays immediately after a bomb is defused
            and before <see cref="F:KMSoundOverride.SoundEffect.GameOverFanfare"/>.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombDrop">
            <summary>Gets the sound that plays when the bomb is set down on the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombExplode">
            <summary>Gets the sound that plays when the bomb explodes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BriefcaseClose">
            <summary>Gets the sound that plays when the freeplay briefcase is closed.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BriefcaseOpen">
            <summary>Gets the sound that plays when the freeplay briefcase is opened.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.ButtonPress">
            <summary>Gets the sound that plays when pressing down a button.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.ButtonRelease">
            <summary>Gets the sound that plays when releasing a button.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.CapacitorPop">
            <summary>Gets the sound that plays when Capacitor Discharge fills up completely.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.CorrectChime">
            <summary>Gets the sound that plays in the tutorial for completing a step correctly.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.DossierOptionPressed">
            <summary>Gets the sound that plays when you change a setting in the menu folder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.EmergencyAlarm">
            <summary>
            Gets the sound that plays when there is less than a minute left on the bomb, this sound loops.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FastestTimerBeep">
            <summary>Gets the sound that plays when the bomb has at least 2 or more strikes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FastTimerBeep">
            <summary>Gets the sound that plays when the bomb has 1 strike.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FreeplayDeviceDrop">
            <summary>Gets the sound that plays as the freeplay briefcase hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.GameOverFanfare">
            <summary>Gets the sound that plays when all bombs are defused. Finishes before the post game screen.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.LightBuzz">
            <summary>Gets the sound that plays when the lights go out.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.LightBuzzShort">
            <summary>Gets the sound that plays when the lights start to come back on.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.MenuButtonPressed">
            <summary>Gets the sound that plays when you start a mission from the mission binder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.MenuDrop">
            <summary>Gets the sound that plays as the mission folder hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NeedyActivated">
            <summary>Gets the sound that plays when a needy gets activated.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NeedyWarning">
            <summary>Gets the sound that plays when a needy is running out of time. This sound loops.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NormalTimerBeep">
            <summary>Gets the sound that plays when the bomb has no strikes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.PageTurn">
            <summary>Gets the sound that plays when a page is turned in the Missions binder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.SelectionTick">
            <summary>Gets the sound that plays as you hover over something that can be interacted with.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Stamp">
            <summary>
            Gets the sound that plays during the post game screen, when either the defused
            or exploded text is stamped onto the binder.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Strike">
            <summary>Gets the sound that plays when you get a strike.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Switch">
            <summary>Gets the sound that plays when a switch is toggled.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.TitleMenuPressed">
            <summary>Gets the sound that plays when pressing a button in one of the tutorials.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.TypewriterKey">
            <summary>
            Gets the sound that plays during the post game screen as the mission information gets typed out.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.WireSequenceMechanism">
            <summary>Gets the sound that plays when switching between sets of wires in Wire Sequence.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.WireSnip">
            <summary>Gets the sound that plays when a wire is cut on a module like Complicated Wires.</summary>
        </member>
        <member name="T:Wawa.Modules.SoundCore">
            <summary>Implementations for <see cref="T:Wawa.Modules.Sound"/>.</summary>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Play(Wawa.Modules.Sound,KMAudio,UnityEngine.Transform,System.Boolean)">
            <summary>Plays the current sound that is stored.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound"/>.</param>
            <param name="audio">The <see cref="T:KMAudio"/> to play it from.</param>
            <param name="transform">The <see cref="T:UnityEngine.Transform"/>, which is needed for the location of the sound.</param>
            <param name="isLooping">Indicates whether the sound should loop.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1"/>, consisting of either a <see cref="T:KMAudio.KMAudioRef"/>,
            or <see langword="default"/> if <see cref="T:KMAudio"/> is unable to play a sound,
            usually caused by playing too many sounds at once.
            </returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.AsSound(System.String)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound"/> where <see cref="P:Wawa.Modules.Sound.Modded"/> is set.</summary>
            <param name="sound">The <see cref="T:System.String"/> to pass in <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>A new instance of <see cref="T:Wawa.Modules.Sound"/> which encapsulates <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.AsSound(KMSoundOverride.SoundEffect)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound"/> where <see cref="P:Wawa.Modules.Sound.Vanilla"/> is set.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect"/> to pass in <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>A new instance of <see cref="T:Wawa.Modules.Sound"/> which encapsulates <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Stop(Wawa.Modules.Sound)">
            <summary>Gets the <see cref="P:Wawa.Modules.Sound.Reference"/> and stops the sound if it is playing.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>The parameter <paramref name="that"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSound(UnityEngine.AudioClip)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound"/> where <see cref="P:Wawa.Modules.Sound.Modded"/> is set.</summary>
            <param name="sound">The <see cref="T:UnityEngine.AudioClip"/> to pass in <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>
            A new instance of <see cref="T:Wawa.Modules.Sound"/> which encapsulates the name of <paramref name="sound"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            where each element has been converted.
            </summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{KMSoundOverride.SoundEffect})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            where each element has been converted.
            </summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{UnityEngine.AudioClip})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            where each element has been converted.
            </summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Stop``1(``0)">
            <summary>
            Gets the <see cref="P:Wawa.Modules.Sound.Reference"/> of a collection of sounds and stops the sound if it is playing.
            </summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="sounds">The multiple <see cref="T:Wawa.Modules.Sound"/> instances to each call <see cref="M:Wawa.Modules.SoundCore.Stop(Wawa.Modules.Sound)"/> on.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Play(System.Collections.Generic.IEnumerable{Wawa.Modules.Sound},KMAudio,UnityEngine.Transform,System.Boolean)">
            <summary>Plays the current sound that is stored.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound"/>.</param>
            <param name="audio">The <see cref="T:KMAudio"/> to play it from.</param>
            <param name="transform">The <see cref="T:UnityEngine.Transform"/>, which is needed for the location of the sound.</param>
            <param name="isLooping">Indicates whether the sound should loop.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1"/>, consisting of either a <see cref="T:KMAudio.KMAudioRef"/>,
            or <see langword="default"/> if <see cref="T:KMAudio"/> is unable to play a sound,
            usually caused by playing too many sounds at once.
            </returns>
        </member>
        <member name="T:Wawa.Modules.State">
            <summary>Encapsulation of status conditions for a <see cref="T:Wawa.Modules.ModdedModule"/>.</summary>
        </member>
        <member name="M:Wawa.Modules.State.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.State"/> class.</summary>
            <param name="name">
            The <see cref="T:System.String"/> containing the module id which is used to assign <see cref="P:Wawa.Modules.State.Id"/>.
            </param>
        </member>
        <member name="P:Wawa.Modules.State.HasStruck">
            <summary>
            Gets or sets a value indicating whether the module has ever called <see cref="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Wawa.Modules.State.IsSolved">
            <summary>Gets a value indicating whether the module is solved.</summary>
            <remarks><para>For needy modules, a module is considered solved any time it is not active.</para></remarks>
        </member>
        <member name="P:Wawa.Modules.State.Id">
            <summary>Gets the unique module id of this module type, primarily used in logging.</summary>
        </member>
        <member name="P:Wawa.Modules.State.HasException">
            <summary>
            Gets or sets a value indicating whether the module has thrown an unhandled <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Wawa.Modules.State.Strikes">
            <summary>Gets or sets the amount of times <see cref="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])"/> was called.</summary>
        </member>
        <member name="M:Wawa.Modules.State.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.Equals(Wawa.Modules.State,Wawa.Modules.State)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.GetHashCode(Wawa.Modules.State)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.Equals(Wawa.Modules.State)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.op_Equality(Wawa.Modules.State,Wawa.Modules.State)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances contain the same values, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.State.op_Inequality(Wawa.Modules.State,Wawa.Modules.State)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.State.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Wawa.Modules.Stringifier">
            <summary>Provides stringification methods.</summary>
        </member>
        <member name="M:Wawa.Modules.Stringifier.FieldCount(System.Version)">
            <summary>Gets the field count of the version.</summary>
            <param name="version">The <see cref="T:System.Version"/> to use.</param>
            <returns>The field count of the parameter <paramref name="version"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>Joins a set of values into one long <see cref="T:System.String"/>.</summary>
            <remarks><para>
            This method is more efficient than using
            <see cref="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.String)"/> for <see cref="T:System.Char"/> separators.
            </para></remarks>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>One long <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Joins a set of values into one long <see cref="T:System.String"/>.</summary>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>One long <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.ToHexString(System.Reflection.Pointer)">
            <summary>Converts a <see cref="T:System.Reflection.Pointer"/> to a <see cref="T:System.String"/>.</summary>
            <param name="value">The <see cref="T:System.Reflection.Pointer"/> to convert.</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.ToShortString(System.Version)">
            <summary>Gets the short display form of the version.</summary>
            <param name="version">The <see cref="T:System.Version"/> to convert.</param>
            <returns>The full name of the parameter <paramref name="version"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.UnfoldedName(System.Type)">
            <summary>Gets the type name, with its generics extended.</summary>
            <param name="type">The <see cref="T:System.Type"/> to get the name of.</param>
            <returns>The name of the parameter <paramref name="type"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Nth(System.Int32,System.Boolean)">
            <summary>Converts a number to an ordinal.</summary>
            <param name="i">The number to convert.</param>
            <param name="indexByZero">Determines whether to index from zero or one.</param>
            <returns>The parameter <paramref name="i"/> as an ordinal.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Split(System.String,System.String)">
            <inheritdoc cref="M:System.String.Split(System.String[],System.StringSplitOptions)"/>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Stringify``1(``0)">
            <summary>
            Converts <paramref name="source"/> into a <see cref="T:System.String"/> representation of <paramref name="source"/>.
            </summary>
            <remarks><para>
            Unlike <see cref="M:System.Object.ToString"/>, the values of all properties are printed out,
            unless they explicitly define a <see cref="M:System.Object.ToString"/>, or implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            in which case each item within is printed out separately.
            </para></remarks>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String"/> representation of.</param>
            <returns><paramref name="source"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Stringify``1(``0,System.Int32,System.Boolean)">
            <summary>
            Converts <paramref name="source"/> into a <see cref="T:System.String"/> representation of <paramref name="source"/>.
            </summary>
            <remarks><para>
            Unlike <see cref="M:System.Object.ToString"/>, the values of all properties are printed out,
            unless they explicitly define a <see cref="M:System.Object.ToString"/>, or implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            in which case each item within is printed out separately.
            </para></remarks>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String"/> representation of.</param>
            <param name="depth">Determines how deep the recursive function should go.</param>
            <param name="useQuotes">
            Determines whether <see cref="T:System.String"/> and <see cref="T:System.Char"/> have a " and ' surrounding them.
            </param>
            <returns><paramref name="source"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.ToHexString``1(``0)">
            <summary>Converts the value to a hex <see cref="T:System.String"/>.</summary>
            <remarks><para>The implementation is based on
            <a href="https://github.com/CommunityToolkit/dotnet/blob/7b53ae23dfc6a7fb12d0fc058b89b6e948f48448/src/CommunityToolkit.Diagnostics/Extensions/ValueTypeExtensions.cs#L44">
            CommunityToolkit.Diagnostics.ValueTypeExtensions.ToHexString
            </a>.
            </para></remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The hex <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.UseStringifier``1(``0,System.Int32)">
            <summary>Forces the use of reflective stringification.</summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String"/> representation of.</param>
            <param name="depth">The amount of nesting.</param>
            <returns><paramref name="source"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.AppendMany``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>Appends an enumeration onto the <see cref="T:System.Text.StringBuilder"/>.</summary>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to mutate and <see langword="return"/>.</param>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>The parameter <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.AppendMany``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Appends an enumeration onto the <see cref="T:System.Text.StringBuilder"/>.</summary>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to mutate and <see langword="return"/>.</param>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>The parameter <paramref name="builder"/>.</returns>
        </member>
    </members>
</doc>
